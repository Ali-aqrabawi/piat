#
# PySNMP MIB module CISCO-CVP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source http://mibs.snmplabs.com:80/asn1/CISCO-CVP-MIB
# Produced by pysmi-0.3.4 at Sun Apr 21 23:29:19 2019
# On host aaqrabaw platform Linux version 4.15.0-47-generic by user aaqrabaw
# Using Python version 3.6.5 (default, Apr  1 2018, 05:46:30) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoURLString, = mibBuilder.importSymbols("CISCO-TC", "CiscoURLString")
InetAddressDNS, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressDNS")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity, iso, TimeTicks, NotificationType, Counter64, Bits, Integer32, ModuleIdentity, Unsigned32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity", "iso", "TimeTicks", "NotificationType", "Counter64", "Bits", "Integer32", "ModuleIdentity", "Unsigned32", "IpAddress")
DisplayString, TextualConvention, TruthValue, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue", "DateAndTime")
ciscoCvpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 590))
ciscoCvpMIB.setRevisions(('2011-09-22 00:00', '2007-10-31 00:00', '2006-10-06 00:00', '2006-05-19 12:00',))
if mibBuilder.loadTexts: ciscoCvpMIB.setLastUpdated('201109220000Z')
if mibBuilder.loadTexts: ciscoCvpMIB.setOrganization('Cisco Systems, Inc.')
ciscoCvpMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 590, 0))
ciscoCvpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 590, 1))
ccvpGeneralInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 1))
ccvpLicensingInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 2))
ccvpThreadPoolInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 3))
ccvpJvmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 4))
ccvpServices = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 5))
ccvpServiceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6))
ccvpNotificationInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 7))
ciscoCvpMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 590, 2))
ciscoCvpMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 1))
ciscoCvpMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2))
class CcvpIndex(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class CcvpServiceType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("sip", 1), ("h323", 2), ("ivr", 3), ("icm", 4), ("reporting", 5), ("vxml", 6))

class CcvpServiceStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("disabled", 0), ("starting", 1), ("inService", 2), ("inServiceWarning", 3), ("inServiceCritical", 4), ("partialService", 5), ("stopping", 6), ("stopped", 7), ("unknown", 8))

ccvpServerName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 1, 1), InetAddressDNS()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpServerName.setStatus('current')
ccvpDescription = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpDescription.setStatus('current')
ccvpVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpVersion.setStatus('current')
ccvpStartTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpStartTime.setStatus('current')
ccvpTimeZoneName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpTimeZoneName.setStatus('current')
ccvpTimeZoneOffsetHours = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-12, 12))).setUnits('hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpTimeZoneOffsetHours.setStatus('current')
ccvpTimeZoneOffsetMinutes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-59, 59))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpTimeZoneOffsetMinutes.setStatus('current')
ccvpOpsConsoleURL = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 1, 8), CiscoURLString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpOpsConsoleURL.setStatus('current')
ccvpSupportToolsURL = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 1, 9), CiscoURLString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSupportToolsURL.setStatus('current')
ccvpEnableNotifications = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpEnableNotifications.setStatus('current')
ccvpLicRtPortsAvail = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 2, 1), Gauge32()).setUnits('ports').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpLicRtPortsAvail.setStatus('current')
ccvpLicRtPortsInUse = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 2, 2), Gauge32()).setUnits('ports').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpLicRtPortsInUse.setStatus('current')
ccvpLicRtPortState = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("safe", 0), ("unknown", 1), ("warning", 2), ("critical", 3), ("failure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpLicRtPortState.setStatus('current')
ccvpLicIntLastUpdate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 2, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpLicIntLastUpdate.setStatus('current')
ccvpLicIntPeriod = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 2, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpLicIntPeriod.setStatus('current')
ccvpLicIntPortReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 2, 6), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpLicIntPortReqs.setStatus('current')
ccvpLicIntAvgPortReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 2, 7), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpLicIntAvgPortReqs.setStatus('current')
ccvpLicIntMaxPortsInUse = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 2, 8), Gauge32()).setUnits('ports').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpLicIntMaxPortsInUse.setStatus('current')
ccvpLicIntPortReqsDenied = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 2, 9), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpLicIntPortReqsDenied.setStatus('current')
ccvpLicAggPortReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 2, 10), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpLicAggPortReqs.setStatus('current')
ccvpLicAggAvgPortReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 2, 11), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpLicAggAvgPortReqs.setStatus('current')
ccvpLicAggMaxPortsInUse = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 2, 12), Counter64()).setUnits('ports').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpLicAggMaxPortsInUse.setStatus('current')
ccvpLicAggPortReqsDenied = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 2, 13), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpLicAggPortReqsDenied.setStatus('current')
ccvpLicPortUsageWarning = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 2, 14), Gauge32().clone(94)).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpLicPortUsageWarning.setStatus('current')
ccvpLicPortUsageCritical = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 2, 15), Gauge32().clone(97)).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpLicPortUsageCritical.setStatus('current')
ccvpTPoolRtIdleThreads = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 3, 1), Gauge32()).setUnits('threads').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpTPoolRtIdleThreads.setStatus('current')
ccvpTPoolRtRunningThreads = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 3, 2), Gauge32()).setUnits('threads').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpTPoolRtRunningThreads.setStatus('current')
ccvpTPoolRtCoreThreads = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 3, 3), Gauge32()).setUnits('threads').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpTPoolRtCoreThreads.setStatus('current')
ccvpTPoolRtMaxThreadsAvail = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 3, 4), Gauge32()).setUnits('threads').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpTPoolRtMaxThreadsAvail.setStatus('current')
ccvpTPoolRtMaxThreadsUsed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 3, 5), Gauge32()).setUnits('threads').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpTPoolRtMaxThreadsUsed.setStatus('current')
ccvpJvmRtMaxMemUsed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 4, 1), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpJvmRtMaxMemUsed.setStatus('current')
ccvpJvmRtCurrMemUsed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 4, 2), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpJvmRtCurrMemUsed.setStatus('current')
ccvpJvmRtMaxMemAvail = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 4, 3), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpJvmRtMaxMemAvail.setStatus('current')
ccvpJvmRtCurrMemAvail = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 4, 4), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpJvmRtCurrMemAvail.setStatus('current')
ccvpJvmRtCurrThreadsInUse = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 4, 5), Gauge32()).setUnits('threads').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpJvmRtCurrThreadsInUse.setStatus('current')
ccvpJvmRtMaxThreadsUsed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 4, 6), Gauge32()).setUnits('threads').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpJvmRtMaxThreadsUsed.setStatus('current')
ccvpJvmRtUpTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 4, 7), Counter64()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpJvmRtUpTime.setStatus('current')
ccvpServiceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 5, 1), )
if mibBuilder.loadTexts: ccvpServiceTable.setStatus('current')
ccvpServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-CVP-MIB", "ccvpServiceIndex"))
if mibBuilder.loadTexts: ccvpServiceEntry.setStatus('current')
ccvpServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 5, 1, 1, 1), CcvpIndex())
if mibBuilder.loadTexts: ccvpServiceIndex.setStatus('current')
ccvpServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 5, 1, 1, 2), CcvpServiceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpServiceType.setStatus('current')
ccvpServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 5, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpServiceName.setStatus('current')
ccvpServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 5, 1, 1, 4), CcvpServiceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpServiceStatus.setStatus('current')
ccvpServiceIntLastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 5, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpServiceIntLastUpdate.setStatus('current')
ccvpServiceIntPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 5, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpServiceIntPeriod.setStatus('current')
ccvpSipTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1), )
if mibBuilder.loadTexts: ccvpSipTable.setStatus('current')
ccvpSipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-CVP-MIB", "ccvpServiceIndex"))
if mibBuilder.loadTexts: ccvpSipEntry.setStatus('current')
ccvpSipRtActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 1), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipRtActiveCalls.setStatus('current')
ccvpSipRtTotalCallLegs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 2), Gauge32()).setUnits('call legs').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipRtTotalCallLegs.setStatus('current')
ccvpSipIntNewCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 3), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipIntNewCalls.setStatus('current')
ccvpSipIntConnectsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 4), Gauge32()).setUnits('connects').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipIntConnectsRcv.setStatus('current')
ccvpSipIntAvgLatency1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 5), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipIntAvgLatency1.setStatus('current')
ccvpSipIntAvgLatency2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 6), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipIntAvgLatency2.setStatus('current')
ccvpSipIntFailedXferPre = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 7), Gauge32()).setUnits('transfers').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipIntFailedXferPre.setStatus('current')
ccvpSipIntFailedXferPost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 8), Gauge32()).setUnits('transfers').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipIntFailedXferPost.setStatus('current')
ccvpSipAggNewCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 9), Counter64()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipAggNewCalls.setStatus('current')
ccvpSipAggConnectsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 10), Counter64()).setUnits('connects').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipAggConnectsRcv.setStatus('current')
ccvpSipAggAvgLatency1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 11), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipAggAvgLatency1.setStatus('current')
ccvpSipAggAvgLatency2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 12), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipAggAvgLatency2.setStatus('current')
ccvpSipAggFailedXferPre = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 13), Counter64()).setUnits('transfers').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipAggFailedXferPre.setStatus('current')
ccvpSipAggFailedXferPost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 14), Counter64()).setUnits('transfers').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipAggFailedXferPost.setStatus('current')
ccvpSipRtBasicVideoOffered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 15), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipRtBasicVideoOffered.setStatus('current')
ccvpSipRtBasicVideoAnswered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 16), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipRtBasicVideoAnswered.setStatus('current')
ccvpSipIntBasicVideoOffered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 17), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipIntBasicVideoOffered.setStatus('current')
ccvpSipIntBasicVideoAnswered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 18), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipIntBasicVideoAnswered.setStatus('current')
ccvpSipAggBasicVideoOffered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 19), Counter64()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipAggBasicVideoOffered.setStatus('current')
ccvpSipAggBasicVideoAnswered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 20), Counter64()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipAggBasicVideoAnswered.setStatus('current')
ccvpSipIntPostCallAnswered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 21), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipIntPostCallAnswered.setStatus('current')
ccvpSipIntWhisperAnswered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 22), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipIntWhisperAnswered.setStatus('current')
ccvpSipIntWhisperFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 23), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipIntWhisperFailed.setStatus('current')
ccvpSipIntGreetingAnswered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 24), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipIntGreetingAnswered.setStatus('current')
ccvpSipIntGreetingFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 25), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipIntGreetingFailed.setStatus('current')
ccvpH323Table = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2), )
if mibBuilder.loadTexts: ccvpH323Table.setStatus('current')
ccvpH323Entry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1), ).setIndexNames((0, "CISCO-CVP-MIB", "ccvpServiceIndex"))
if mibBuilder.loadTexts: ccvpH323Entry.setStatus('current')
ccvpH323RtCallsInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 1), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323RtCallsInProgress.setStatus('current')
ccvpH323RtMemoryInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323RtMemoryInUse.setStatus('current')
ccvpH323IntArrivalRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 3), Gauge32()).setUnits('calls per minute').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntArrivalRate.setStatus('current')
ccvpH323IntTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 4), Gauge32()).setUnits('calls per minute').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntTransferRate.setStatus('current')
ccvpH323IntMaxNewCallLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 5), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntMaxNewCallLatency.setStatus('current')
ccvpH323IntAvgNewCallLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 6), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntAvgNewCallLatency.setStatus('current')
ccvpH323IntMaxXferToAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 7), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntMaxXferToAlert.setStatus('current')
ccvpH323IntAvgXferToAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 8), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntAvgXferToAlert.setStatus('current')
ccvpH323IntMaxXferToAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 9), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntMaxXferToAnswer.setStatus('current')
ccvpH323IntAvgXferToAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 10), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntAvgXferToAnswer.setStatus('current')
ccvpH323IntNewCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 11), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntNewCalls.setStatus('current')
ccvpH323IntTransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 12), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntTransferred.setStatus('current')
ccvpH323IntRedirected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 13), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntRedirected.setStatus('current')
ccvpH323IntNotTransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 14), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntNotTransferred.setStatus('current')
ccvpH323IntPromptsNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 15), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntPromptsNotFound.setStatus('current')
ccvpH323IntCriticalMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 16), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntCriticalMedia.setStatus('current')
ccvpH323IntCallsFinished = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 17), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntCallsFinished.setStatus('current')
ccvpH323IntMaxCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 18), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntMaxCpuUsage.setStatus('current')
ccvpH323IntAvgCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 19), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntAvgCpuUsage.setStatus('current')
ccvpIvrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3), )
if mibBuilder.loadTexts: ccvpIvrTable.setStatus('current')
ccvpIvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1), ).setIndexNames((0, "CISCO-CVP-MIB", "ccvpServiceIndex"))
if mibBuilder.loadTexts: ccvpIvrEntry.setStatus('current')
ccvpIvrRtActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 1), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrRtActiveCalls.setStatus('current')
ccvpIvrRtActiveHttpReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 2), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrRtActiveHttpReqs.setStatus('current')
ccvpIvrIntNewCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 3), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrIntNewCalls.setStatus('current')
ccvpIvrIntMaxActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 4), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrIntMaxActiveCalls.setStatus('current')
ccvpIvrIntCallsFinished = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 5), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrIntCallsFinished.setStatus('current')
ccvpIvrIntAvgCallLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 6), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrIntAvgCallLatency.setStatus('current')
ccvpIvrIntMaxCallLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 7), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrIntMaxCallLatency.setStatus('current')
ccvpIvrIntMinCallLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 8), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrIntMinCallLatency.setStatus('current')
ccvpIvrIntHttpReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 9), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrIntHttpReqs.setStatus('current')
ccvpIvrIntMaxActiveHttpReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 10), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrIntMaxActiveHttpReqs.setStatus('current')
ccvpIvrIntMaxHttpReqRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 11), Gauge32()).setUnits('requests per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrIntMaxHttpReqRate.setStatus('current')
ccvpIvrIntAvgHttpReqRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 12), Gauge32()).setUnits('requests per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrIntAvgHttpReqRate.setStatus('current')
ccvpIvrAggNewCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 13), Counter64()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrAggNewCalls.setStatus('current')
ccvpIvrAggMaxActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 14), Counter32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrAggMaxActiveCalls.setStatus('current')
ccvpIvrAggHttpReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 15), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrAggHttpReqs.setStatus('current')
ccvpIvrAggMaxHttpReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 16), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrAggMaxHttpReqs.setStatus('current')
ccvpIvrRtFullVideoCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 17), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrRtFullVideoCalls.setStatus('current')
ccvpIvrIntFullVideoCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 18), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrIntFullVideoCalls.setStatus('current')
ccvpIvrAggFullVideoCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 19), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrAggFullVideoCalls.setStatus('current')
ccvpIvrIntMaxFullVideoCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 20), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrIntMaxFullVideoCalls.setStatus('current')
ccvpIvrAggMaxFullVideoCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 21), Counter64()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrAggMaxFullVideoCalls.setStatus('current')
ccvpIvrAggAgentPushedVideo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 22), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrAggAgentPushedVideo.setStatus('current')
ccvpIvrAggAgentInitiatedRecordings = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 23), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrAggAgentInitiatedRecordings.setStatus('current')
ccvpIvrAggAgentVCRControlInvocations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 24), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrAggAgentVCRControlInvocations.setStatus('current')
ccvpIcmTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4), )
if mibBuilder.loadTexts: ccvpIcmTable.setStatus('current')
ccvpIcmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1), ).setIndexNames((0, "CISCO-CVP-MIB", "ccvpServiceIndex"))
if mibBuilder.loadTexts: ccvpIcmEntry.setStatus('current')
ccvpIcmRtActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 1), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmRtActiveCalls.setStatus('current')
ccvpIcmRtActiveSIPCallLegs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 2), Gauge32()).setUnits('call legs').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmRtActiveSIPCallLegs.setStatus('current')
ccvpIcmRtActiveH323CallLegs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 3), Gauge32()).setUnits('call legs').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmRtActiveH323CallLegs.setStatus('current')
ccvpIcmRtActiveVRUCallLegs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 4), Gauge32()).setUnits('call legs').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmRtActiveVRUCallLegs.setStatus('current')
ccvpIcmRtActiveICMLookupReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 5), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmRtActiveICMLookupReqs.setStatus('current')
ccvpIcmIntNewCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 6), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmIntNewCalls.setStatus('current')
ccvpIcmIntSipCallLegs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 7), Gauge32()).setUnits('call legs').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmIntSipCallLegs.setStatus('current')
ccvpIcmIntH323CallLegs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 8), Gauge32()).setUnits('call legs').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmIntH323CallLegs.setStatus('current')
ccvpIcmIntVruCallLegs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 9), Gauge32()).setUnits('call legs').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmIntVruCallLegs.setStatus('current')
ccvpIcmIntIcmLookupReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 10), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmIntIcmLookupReqs.setStatus('current')
ccvpIcmAggCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 11), Counter64()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmAggCalls.setStatus('current')
ccvpIcmAggSipCallLegs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 12), Counter64()).setUnits('call legs').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmAggSipCallLegs.setStatus('current')
ccvpIcmAggH323CallLegs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 13), Counter64()).setUnits('call legs').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmAggH323CallLegs.setStatus('current')
ccvpIcmAggVruCallLegs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 14), Counter64()).setUnits('call legs').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmAggVruCallLegs.setStatus('current')
ccvpIcmAggIcmLookupReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 15), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmAggIcmLookupReqs.setStatus('current')
ccvpIcmRtFullVideoCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 16), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmRtFullVideoCalls.setStatus('current')
ccvpIcmRtOfferedBasicVideoCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 17), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmRtOfferedBasicVideoCalls.setStatus('current')
ccvpIcmRtAcceptedBasicVideoCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 18), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmRtAcceptedBasicVideoCalls.setStatus('current')
ccvpIcmIntFullVideoCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 19), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmIntFullVideoCalls.setStatus('current')
ccvpIcmIntOfferedBasicVideoCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 20), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmIntOfferedBasicVideoCalls.setStatus('current')
ccvpIcmIntAcceptedBasicVideoCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 21), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmIntAcceptedBasicVideoCalls.setStatus('current')
ccvpIcmAggFullVideoCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 22), Counter64()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmAggFullVideoCalls.setStatus('current')
ccvpIcmAggOfferedBasicVideoCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 23), Counter64()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmAggOfferedBasicVideoCalls.setStatus('current')
ccvpIcmAggAcceptedBasicVideoCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 24), Counter64()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmAggAcceptedBasicVideoCalls.setStatus('current')
ccvpReptTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 5), )
if mibBuilder.loadTexts: ccvpReptTable.setStatus('current')
ccvpReptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 5, 1), ).setIndexNames((0, "CISCO-CVP-MIB", "ccvpServiceIndex"))
if mibBuilder.loadTexts: ccvpReptEntry.setStatus('current')
ccvpReptIntVxmlEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 5, 1, 1), Gauge32()).setUnits('events').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpReptIntVxmlEvents.setStatus('current')
ccvpReptIntSipEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 5, 1, 2), Gauge32()).setUnits('events').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpReptIntSipEvents.setStatus('current')
ccvpReptIntIvrEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 5, 1, 3), Gauge32()).setUnits('events').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpReptIntIvrEvents.setStatus('current')
ccvpReptIntDatabaseWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 5, 1, 4), Gauge32()).setUnits('writes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpReptIntDatabaseWrites.setStatus('current')
ccvpReptAggVxmlEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 5, 1, 5), Counter64()).setUnits('events').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpReptAggVxmlEvents.setStatus('current')
ccvpReptAggSipEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 5, 1, 6), Counter64()).setUnits('events').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpReptAggSipEvents.setStatus('current')
ccvpReptAggIvrEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 5, 1, 7), Counter64()).setUnits('events').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpReptAggIvrEvents.setStatus('current')
ccvpReptAggDatabaseWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 5, 1, 8), Counter64()).setUnits('writes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpReptAggDatabaseWrites.setStatus('current')
ccvpVxmlTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 6), )
if mibBuilder.loadTexts: ccvpVxmlTable.setStatus('current')
ccvpVxmlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 6, 1), ).setIndexNames((0, "CISCO-CVP-MIB", "ccvpServiceIndex"))
if mibBuilder.loadTexts: ccvpVxmlEntry.setStatus('current')
ccvpVxmlRtActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 6, 1, 1), Gauge32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpVxmlRtActiveSessions.setStatus('current')
ccvpVxmlRtActiveIcmLookups = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 6, 1, 2), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpVxmlRtActiveIcmLookups.setStatus('current')
ccvpVxmlIntSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 6, 1, 3), Gauge32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpVxmlIntSessions.setStatus('current')
ccvpVxmlIntReptEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 6, 1, 4), Gauge32()).setUnits('events').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpVxmlIntReptEvents.setStatus('current')
ccvpVxmlIntIcmLookupReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 6, 1, 5), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpVxmlIntIcmLookupReqs.setStatus('current')
ccvpVxmlIntIcmLookupResp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 6, 1, 6), Gauge32()).setUnits('responses').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpVxmlIntIcmLookupResp.setStatus('current')
ccvpVxmlIntIcmLookupSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 6, 1, 7), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpVxmlIntIcmLookupSuccess.setStatus('current')
ccvpVxmlIntIcmLookupFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 6, 1, 8), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpVxmlIntIcmLookupFails.setStatus('current')
ccvpVxmlAggSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 6, 1, 9), Counter64()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpVxmlAggSessions.setStatus('current')
ccvpVxmlAggReptEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 6, 1, 10), Counter64()).setUnits('events').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpVxmlAggReptEvents.setStatus('current')
ccvpVxmlAggIcmLookupReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 6, 1, 11), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpVxmlAggIcmLookupReqs.setStatus('current')
ccvpVxmlAggIcmLookupResp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 6, 1, 12), Counter64()).setUnits('responses').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpVxmlAggIcmLookupResp.setStatus('current')
ccvpVxmlAggIcmLookupSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 6, 1, 13), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpVxmlAggIcmLookupSuccess.setStatus('current')
ccvpVxmlAggIcmLookupFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 6, 1, 14), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpVxmlAggIcmLookupFails.setStatus('current')
ccvpEventMessageId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 7, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccvpEventMessageId.setStatus('current')
ccvpEventHostName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 7, 2), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccvpEventHostName.setStatus('current')
ccvpEventAppName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 7, 3), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccvpEventAppName.setStatus('current')
ccvpEventMessageName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 7, 4), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccvpEventMessageName.setStatus('current')
ccvpEventState = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("raise", 1), ("clear", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccvpEventState.setStatus('current')
ccvpEventSeverity = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("informational", 6), ("debug", 7)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccvpEventSeverity.setStatus('current')
ccvpEventTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 7, 7), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccvpEventTimestamp.setStatus('current')
ccvpEventText = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 7, 8), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccvpEventText.setStatus('current')
ccvpCvpEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 590, 0, 1)).setObjects(("CISCO-CVP-MIB", "ccvpEventMessageId"), ("CISCO-CVP-MIB", "ccvpEventHostName"), ("CISCO-CVP-MIB", "ccvpEventAppName"), ("CISCO-CVP-MIB", "ccvpEventMessageName"), ("CISCO-CVP-MIB", "ccvpEventState"), ("CISCO-CVP-MIB", "ccvpEventSeverity"), ("CISCO-CVP-MIB", "ccvpEventTimestamp"), ("CISCO-CVP-MIB", "ccvpEventText"))
if mibBuilder.loadTexts: ccvpCvpEvent.setStatus('current')
ciscoCcvpMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 1, 1)).setObjects(("CISCO-CVP-MIB", "ccvpGeneralInfoGroup"), ("CISCO-CVP-MIB", "ccvpLicensingInfoGroup"), ("CISCO-CVP-MIB", "ccvpThreadPoolInfoGroup"), ("CISCO-CVP-MIB", "ccvpJvmInfoGroup"), ("CISCO-CVP-MIB", "ccvpServiceTableGroup"), ("CISCO-CVP-MIB", "ccvpSipTableGroup"), ("CISCO-CVP-MIB", "ccvpH323TableGroup"), ("CISCO-CVP-MIB", "ccvpIvrTableGroup"), ("CISCO-CVP-MIB", "ccvpIcmTableGroup"), ("CISCO-CVP-MIB", "ccvpReptTableGroup"), ("CISCO-CVP-MIB", "ccvpVxmlTableGroup"), ("CISCO-CVP-MIB", "ccvpCvpNotificationInfoGroup"), ("CISCO-CVP-MIB", "ccvpCvpEventsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCcvpMIBComplianceRev1 = ciscoCcvpMIBComplianceRev1.setStatus('deprecated')
ciscoCcvpMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 1, 2)).setObjects(("CISCO-CVP-MIB", "ccvpGeneralInfoGroup"), ("CISCO-CVP-MIB", "ccvpLicensingInfoGroup"), ("CISCO-CVP-MIB", "ccvpThreadPoolInfoGroup"), ("CISCO-CVP-MIB", "ccvpJvmInfoGroup"), ("CISCO-CVP-MIB", "ccvpServiceTableGroup"), ("CISCO-CVP-MIB", "ccvpSipTableGroup"), ("CISCO-CVP-MIB", "ccvpSipVideoTableGroup"), ("CISCO-CVP-MIB", "ccvpH323TableGroup"), ("CISCO-CVP-MIB", "ccvpIvrTableGroup"), ("CISCO-CVP-MIB", "ccvpIvrVideoTableGroup"), ("CISCO-CVP-MIB", "ccvpIcmTableGroup"), ("CISCO-CVP-MIB", "ccvpIcmVideoTableGroup"), ("CISCO-CVP-MIB", "ccvpReptTableGroup"), ("CISCO-CVP-MIB", "ccvpVxmlTableGroup"), ("CISCO-CVP-MIB", "ccvpCvpNotificationInfoGroup"), ("CISCO-CVP-MIB", "ccvpCvpEventsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCcvpMIBComplianceRev2 = ciscoCcvpMIBComplianceRev2.setStatus('current')
ccvpGeneralInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2, 1)).setObjects(("CISCO-CVP-MIB", "ccvpServerName"), ("CISCO-CVP-MIB", "ccvpDescription"), ("CISCO-CVP-MIB", "ccvpVersion"), ("CISCO-CVP-MIB", "ccvpStartTime"), ("CISCO-CVP-MIB", "ccvpTimeZoneName"), ("CISCO-CVP-MIB", "ccvpTimeZoneOffsetHours"), ("CISCO-CVP-MIB", "ccvpTimeZoneOffsetMinutes"), ("CISCO-CVP-MIB", "ccvpOpsConsoleURL"), ("CISCO-CVP-MIB", "ccvpSupportToolsURL"), ("CISCO-CVP-MIB", "ccvpEnableNotifications"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccvpGeneralInfoGroup = ccvpGeneralInfoGroup.setStatus('current')
ccvpLicensingInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2, 2)).setObjects(("CISCO-CVP-MIB", "ccvpLicRtPortsAvail"), ("CISCO-CVP-MIB", "ccvpLicRtPortsInUse"), ("CISCO-CVP-MIB", "ccvpLicRtPortState"), ("CISCO-CVP-MIB", "ccvpLicIntLastUpdate"), ("CISCO-CVP-MIB", "ccvpLicIntPeriod"), ("CISCO-CVP-MIB", "ccvpLicIntPortReqs"), ("CISCO-CVP-MIB", "ccvpLicIntAvgPortReqs"), ("CISCO-CVP-MIB", "ccvpLicIntMaxPortsInUse"), ("CISCO-CVP-MIB", "ccvpLicIntPortReqsDenied"), ("CISCO-CVP-MIB", "ccvpLicAggPortReqs"), ("CISCO-CVP-MIB", "ccvpLicAggAvgPortReqs"), ("CISCO-CVP-MIB", "ccvpLicAggMaxPortsInUse"), ("CISCO-CVP-MIB", "ccvpLicAggPortReqsDenied"), ("CISCO-CVP-MIB", "ccvpLicPortUsageWarning"), ("CISCO-CVP-MIB", "ccvpLicPortUsageCritical"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccvpLicensingInfoGroup = ccvpLicensingInfoGroup.setStatus('current')
ccvpThreadPoolInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2, 3)).setObjects(("CISCO-CVP-MIB", "ccvpTPoolRtIdleThreads"), ("CISCO-CVP-MIB", "ccvpTPoolRtRunningThreads"), ("CISCO-CVP-MIB", "ccvpTPoolRtCoreThreads"), ("CISCO-CVP-MIB", "ccvpTPoolRtMaxThreadsAvail"), ("CISCO-CVP-MIB", "ccvpTPoolRtMaxThreadsUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccvpThreadPoolInfoGroup = ccvpThreadPoolInfoGroup.setStatus('current')
ccvpJvmInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2, 4)).setObjects(("CISCO-CVP-MIB", "ccvpJvmRtMaxMemUsed"), ("CISCO-CVP-MIB", "ccvpJvmRtCurrMemUsed"), ("CISCO-CVP-MIB", "ccvpJvmRtMaxMemAvail"), ("CISCO-CVP-MIB", "ccvpJvmRtCurrMemAvail"), ("CISCO-CVP-MIB", "ccvpJvmRtCurrThreadsInUse"), ("CISCO-CVP-MIB", "ccvpJvmRtMaxThreadsUsed"), ("CISCO-CVP-MIB", "ccvpJvmRtUpTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccvpJvmInfoGroup = ccvpJvmInfoGroup.setStatus('current')
ccvpServiceTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2, 5)).setObjects(("CISCO-CVP-MIB", "ccvpServiceType"), ("CISCO-CVP-MIB", "ccvpServiceName"), ("CISCO-CVP-MIB", "ccvpServiceStatus"), ("CISCO-CVP-MIB", "ccvpServiceIntLastUpdate"), ("CISCO-CVP-MIB", "ccvpServiceIntPeriod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccvpServiceTableGroup = ccvpServiceTableGroup.setStatus('current')
ccvpSipTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2, 6)).setObjects(("CISCO-CVP-MIB", "ccvpSipRtActiveCalls"), ("CISCO-CVP-MIB", "ccvpSipRtTotalCallLegs"), ("CISCO-CVP-MIB", "ccvpSipIntNewCalls"), ("CISCO-CVP-MIB", "ccvpSipIntConnectsRcv"), ("CISCO-CVP-MIB", "ccvpSipIntAvgLatency1"), ("CISCO-CVP-MIB", "ccvpSipIntAvgLatency2"), ("CISCO-CVP-MIB", "ccvpSipIntFailedXferPre"), ("CISCO-CVP-MIB", "ccvpSipIntFailedXferPost"), ("CISCO-CVP-MIB", "ccvpSipAggNewCalls"), ("CISCO-CVP-MIB", "ccvpSipAggConnectsRcv"), ("CISCO-CVP-MIB", "ccvpSipAggAvgLatency1"), ("CISCO-CVP-MIB", "ccvpSipAggAvgLatency2"), ("CISCO-CVP-MIB", "ccvpSipAggFailedXferPre"), ("CISCO-CVP-MIB", "ccvpSipAggFailedXferPost"), ("CISCO-CVP-MIB", "ccvpSipIntPostCallAnswered"), ("CISCO-CVP-MIB", "ccvpSipIntWhisperAnswered"), ("CISCO-CVP-MIB", "ccvpSipIntWhisperFailed"), ("CISCO-CVP-MIB", "ccvpSipIntGreetingAnswered"), ("CISCO-CVP-MIB", "ccvpSipIntGreetingFailed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccvpSipTableGroup = ccvpSipTableGroup.setStatus('current')
ccvpH323TableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2, 7)).setObjects(("CISCO-CVP-MIB", "ccvpH323RtCallsInProgress"), ("CISCO-CVP-MIB", "ccvpH323RtMemoryInUse"), ("CISCO-CVP-MIB", "ccvpH323IntArrivalRate"), ("CISCO-CVP-MIB", "ccvpH323IntTransferRate"), ("CISCO-CVP-MIB", "ccvpH323IntMaxNewCallLatency"), ("CISCO-CVP-MIB", "ccvpH323IntAvgNewCallLatency"), ("CISCO-CVP-MIB", "ccvpH323IntMaxXferToAlert"), ("CISCO-CVP-MIB", "ccvpH323IntAvgXferToAlert"), ("CISCO-CVP-MIB", "ccvpH323IntMaxXferToAnswer"), ("CISCO-CVP-MIB", "ccvpH323IntAvgXferToAnswer"), ("CISCO-CVP-MIB", "ccvpH323IntNewCalls"), ("CISCO-CVP-MIB", "ccvpH323IntTransferred"), ("CISCO-CVP-MIB", "ccvpH323IntRedirected"), ("CISCO-CVP-MIB", "ccvpH323IntNotTransferred"), ("CISCO-CVP-MIB", "ccvpH323IntPromptsNotFound"), ("CISCO-CVP-MIB", "ccvpH323IntCriticalMedia"), ("CISCO-CVP-MIB", "ccvpH323IntCallsFinished"), ("CISCO-CVP-MIB", "ccvpH323IntMaxCpuUsage"), ("CISCO-CVP-MIB", "ccvpH323IntAvgCpuUsage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccvpH323TableGroup = ccvpH323TableGroup.setStatus('current')
ccvpIvrTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2, 8)).setObjects(("CISCO-CVP-MIB", "ccvpIvrRtActiveCalls"), ("CISCO-CVP-MIB", "ccvpIvrRtActiveHttpReqs"), ("CISCO-CVP-MIB", "ccvpIvrIntNewCalls"), ("CISCO-CVP-MIB", "ccvpIvrIntMaxActiveCalls"), ("CISCO-CVP-MIB", "ccvpIvrIntCallsFinished"), ("CISCO-CVP-MIB", "ccvpIvrIntAvgCallLatency"), ("CISCO-CVP-MIB", "ccvpIvrIntMaxCallLatency"), ("CISCO-CVP-MIB", "ccvpIvrIntMinCallLatency"), ("CISCO-CVP-MIB", "ccvpIvrIntHttpReqs"), ("CISCO-CVP-MIB", "ccvpIvrIntMaxActiveHttpReqs"), ("CISCO-CVP-MIB", "ccvpIvrIntMaxHttpReqRate"), ("CISCO-CVP-MIB", "ccvpIvrIntAvgHttpReqRate"), ("CISCO-CVP-MIB", "ccvpIvrAggNewCalls"), ("CISCO-CVP-MIB", "ccvpIvrAggMaxActiveCalls"), ("CISCO-CVP-MIB", "ccvpIvrAggHttpReqs"), ("CISCO-CVP-MIB", "ccvpIvrAggMaxHttpReqs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccvpIvrTableGroup = ccvpIvrTableGroup.setStatus('current')
ccvpIcmTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2, 9)).setObjects(("CISCO-CVP-MIB", "ccvpIcmRtActiveCalls"), ("CISCO-CVP-MIB", "ccvpIcmRtActiveSIPCallLegs"), ("CISCO-CVP-MIB", "ccvpIcmRtActiveH323CallLegs"), ("CISCO-CVP-MIB", "ccvpIcmRtActiveVRUCallLegs"), ("CISCO-CVP-MIB", "ccvpIcmRtActiveICMLookupReqs"), ("CISCO-CVP-MIB", "ccvpIcmIntNewCalls"), ("CISCO-CVP-MIB", "ccvpIcmIntSipCallLegs"), ("CISCO-CVP-MIB", "ccvpIcmIntH323CallLegs"), ("CISCO-CVP-MIB", "ccvpIcmIntVruCallLegs"), ("CISCO-CVP-MIB", "ccvpIcmIntIcmLookupReqs"), ("CISCO-CVP-MIB", "ccvpIcmAggCalls"), ("CISCO-CVP-MIB", "ccvpIcmAggSipCallLegs"), ("CISCO-CVP-MIB", "ccvpIcmAggH323CallLegs"), ("CISCO-CVP-MIB", "ccvpIcmAggVruCallLegs"), ("CISCO-CVP-MIB", "ccvpIcmAggIcmLookupReqs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccvpIcmTableGroup = ccvpIcmTableGroup.setStatus('current')
ccvpReptTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2, 10)).setObjects(("CISCO-CVP-MIB", "ccvpReptIntVxmlEvents"), ("CISCO-CVP-MIB", "ccvpReptIntSipEvents"), ("CISCO-CVP-MIB", "ccvpReptIntIvrEvents"), ("CISCO-CVP-MIB", "ccvpReptIntDatabaseWrites"), ("CISCO-CVP-MIB", "ccvpReptAggVxmlEvents"), ("CISCO-CVP-MIB", "ccvpReptAggSipEvents"), ("CISCO-CVP-MIB", "ccvpReptAggIvrEvents"), ("CISCO-CVP-MIB", "ccvpReptAggDatabaseWrites"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccvpReptTableGroup = ccvpReptTableGroup.setStatus('current')
ccvpVxmlTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2, 11)).setObjects(("CISCO-CVP-MIB", "ccvpVxmlRtActiveSessions"), ("CISCO-CVP-MIB", "ccvpVxmlRtActiveIcmLookups"), ("CISCO-CVP-MIB", "ccvpVxmlIntSessions"), ("CISCO-CVP-MIB", "ccvpVxmlIntReptEvents"), ("CISCO-CVP-MIB", "ccvpVxmlIntIcmLookupReqs"), ("CISCO-CVP-MIB", "ccvpVxmlIntIcmLookupResp"), ("CISCO-CVP-MIB", "ccvpVxmlIntIcmLookupSuccess"), ("CISCO-CVP-MIB", "ccvpVxmlIntIcmLookupFails"), ("CISCO-CVP-MIB", "ccvpVxmlAggSessions"), ("CISCO-CVP-MIB", "ccvpVxmlAggReptEvents"), ("CISCO-CVP-MIB", "ccvpVxmlAggIcmLookupReqs"), ("CISCO-CVP-MIB", "ccvpVxmlAggIcmLookupResp"), ("CISCO-CVP-MIB", "ccvpVxmlAggIcmLookupSuccess"), ("CISCO-CVP-MIB", "ccvpVxmlAggIcmLookupFails"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccvpVxmlTableGroup = ccvpVxmlTableGroup.setStatus('current')
ccvpCvpNotificationInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2, 12)).setObjects(("CISCO-CVP-MIB", "ccvpEventMessageId"), ("CISCO-CVP-MIB", "ccvpEventHostName"), ("CISCO-CVP-MIB", "ccvpEventAppName"), ("CISCO-CVP-MIB", "ccvpEventMessageName"), ("CISCO-CVP-MIB", "ccvpEventState"), ("CISCO-CVP-MIB", "ccvpEventSeverity"), ("CISCO-CVP-MIB", "ccvpEventTimestamp"), ("CISCO-CVP-MIB", "ccvpEventText"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccvpCvpNotificationInfoGroup = ccvpCvpNotificationInfoGroup.setStatus('current')
ccvpCvpEventsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2, 13)).setObjects(("CISCO-CVP-MIB", "ccvpCvpEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccvpCvpEventsGroup = ccvpCvpEventsGroup.setStatus('current')
ccvpSipVideoTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2, 14)).setObjects(("CISCO-CVP-MIB", "ccvpSipRtBasicVideoOffered"), ("CISCO-CVP-MIB", "ccvpSipRtBasicVideoAnswered"), ("CISCO-CVP-MIB", "ccvpSipIntBasicVideoOffered"), ("CISCO-CVP-MIB", "ccvpSipIntBasicVideoAnswered"), ("CISCO-CVP-MIB", "ccvpSipAggBasicVideoOffered"), ("CISCO-CVP-MIB", "ccvpSipAggBasicVideoAnswered"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccvpSipVideoTableGroup = ccvpSipVideoTableGroup.setStatus('current')
ccvpIvrVideoTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2, 15)).setObjects(("CISCO-CVP-MIB", "ccvpIvrRtFullVideoCalls"), ("CISCO-CVP-MIB", "ccvpIvrIntFullVideoCalls"), ("CISCO-CVP-MIB", "ccvpIvrAggFullVideoCalls"), ("CISCO-CVP-MIB", "ccvpIvrIntMaxFullVideoCalls"), ("CISCO-CVP-MIB", "ccvpIvrAggMaxFullVideoCalls"), ("CISCO-CVP-MIB", "ccvpIvrAggAgentPushedVideo"), ("CISCO-CVP-MIB", "ccvpIvrAggAgentInitiatedRecordings"), ("CISCO-CVP-MIB", "ccvpIvrAggAgentVCRControlInvocations"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccvpIvrVideoTableGroup = ccvpIvrVideoTableGroup.setStatus('current')
ccvpIcmVideoTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2, 16)).setObjects(("CISCO-CVP-MIB", "ccvpIcmRtFullVideoCalls"), ("CISCO-CVP-MIB", "ccvpIcmRtOfferedBasicVideoCalls"), ("CISCO-CVP-MIB", "ccvpIcmRtAcceptedBasicVideoCalls"), ("CISCO-CVP-MIB", "ccvpIcmIntFullVideoCalls"), ("CISCO-CVP-MIB", "ccvpIcmIntOfferedBasicVideoCalls"), ("CISCO-CVP-MIB", "ccvpIcmIntAcceptedBasicVideoCalls"), ("CISCO-CVP-MIB", "ccvpIcmAggFullVideoCalls"), ("CISCO-CVP-MIB", "ccvpIcmAggOfferedBasicVideoCalls"), ("CISCO-CVP-MIB", "ccvpIcmAggAcceptedBasicVideoCalls"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccvpIcmVideoTableGroup = ccvpIcmVideoTableGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-CVP-MIB", ccvpSipAggAvgLatency1=ccvpSipAggAvgLatency1, ccvpH323IntPromptsNotFound=ccvpH323IntPromptsNotFound, ccvpIcmRtActiveVRUCallLegs=ccvpIcmRtActiveVRUCallLegs, ccvpIvrIntNewCalls=ccvpIvrIntNewCalls, ccvpIvrIntHttpReqs=ccvpIvrIntHttpReqs, ccvpIcmRtActiveCalls=ccvpIcmRtActiveCalls, ccvpServiceStatus=ccvpServiceStatus, ccvpLicRtPortState=ccvpLicRtPortState, ccvpSipRtTotalCallLegs=ccvpSipRtTotalCallLegs, ciscoCvpMIBConform=ciscoCvpMIBConform, ccvpServiceIntPeriod=ccvpServiceIntPeriod, ccvpVxmlEntry=ccvpVxmlEntry, ccvpIvrIntMaxCallLatency=ccvpIvrIntMaxCallLatency, ccvpH323IntAvgXferToAlert=ccvpH323IntAvgXferToAlert, ccvpEventAppName=ccvpEventAppName, ccvpH323IntTransferRate=ccvpH323IntTransferRate, ccvpIvrIntMinCallLatency=ccvpIvrIntMinCallLatency, ccvpIvrAggAgentVCRControlInvocations=ccvpIvrAggAgentVCRControlInvocations, ccvpSipIntFailedXferPre=ccvpSipIntFailedXferPre, ccvpLicPortUsageCritical=ccvpLicPortUsageCritical, ccvpH323IntMaxXferToAlert=ccvpH323IntMaxXferToAlert, ciscoCvpMIBObjects=ciscoCvpMIBObjects, ccvpDescription=ccvpDescription, ccvpIcmIntAcceptedBasicVideoCalls=ccvpIcmIntAcceptedBasicVideoCalls, ccvpServerName=ccvpServerName, ccvpJvmRtMaxThreadsUsed=ccvpJvmRtMaxThreadsUsed, ccvpVxmlRtActiveSessions=ccvpVxmlRtActiveSessions, ccvpIvrAggMaxHttpReqs=ccvpIvrAggMaxHttpReqs, ccvpIcmAggCalls=ccvpIcmAggCalls, ccvpServiceTableGroup=ccvpServiceTableGroup, ccvpIcmRtAcceptedBasicVideoCalls=ccvpIcmRtAcceptedBasicVideoCalls, ciscoCvpMIBNotifs=ciscoCvpMIBNotifs, ccvpLicIntPortReqs=ccvpLicIntPortReqs, ccvpVxmlAggSessions=ccvpVxmlAggSessions, ccvpVxmlRtActiveIcmLookups=ccvpVxmlRtActiveIcmLookups, ccvpNotificationInfo=ccvpNotificationInfo, ccvpCvpNotificationInfoGroup=ccvpCvpNotificationInfoGroup, ccvpH323IntMaxCpuUsage=ccvpH323IntMaxCpuUsage, ccvpH323IntArrivalRate=ccvpH323IntArrivalRate, ccvpIvrAggMaxFullVideoCalls=ccvpIvrAggMaxFullVideoCalls, ccvpReptIntDatabaseWrites=ccvpReptIntDatabaseWrites, ccvpVxmlAggIcmLookupReqs=ccvpVxmlAggIcmLookupReqs, ccvpReptAggVxmlEvents=ccvpReptAggVxmlEvents, ccvpSipAggBasicVideoAnswered=ccvpSipAggBasicVideoAnswered, ccvpVxmlAggIcmLookupResp=ccvpVxmlAggIcmLookupResp, ciscoCvpMIBGroups=ciscoCvpMIBGroups, ccvpIvrIntMaxActiveHttpReqs=ccvpIvrIntMaxActiveHttpReqs, ccvpIcmAggH323CallLegs=ccvpIcmAggH323CallLegs, ccvpCvpEvent=ccvpCvpEvent, ccvpThreadPoolInfoGroup=ccvpThreadPoolInfoGroup, ccvpIcmEntry=ccvpIcmEntry, ccvpReptTable=ccvpReptTable, ccvpLicAggMaxPortsInUse=ccvpLicAggMaxPortsInUse, ccvpVersion=ccvpVersion, ccvpIcmAggSipCallLegs=ccvpIcmAggSipCallLegs, ccvpReptIntVxmlEvents=ccvpReptIntVxmlEvents, ccvpStartTime=ccvpStartTime, ccvpIvrTableGroup=ccvpIvrTableGroup, ccvpTPoolRtIdleThreads=ccvpTPoolRtIdleThreads, ccvpTPoolRtMaxThreadsAvail=ccvpTPoolRtMaxThreadsAvail, ccvpIvrIntMaxFullVideoCalls=ccvpIvrIntMaxFullVideoCalls, ccvpReptIntSipEvents=ccvpReptIntSipEvents, ccvpIvrIntFullVideoCalls=ccvpIvrIntFullVideoCalls, ccvpH323IntAvgCpuUsage=ccvpH323IntAvgCpuUsage, ccvpVxmlIntReptEvents=ccvpVxmlIntReptEvents, ccvpEnableNotifications=ccvpEnableNotifications, ccvpJvmRtCurrMemAvail=ccvpJvmRtCurrMemAvail, ccvpIcmIntNewCalls=ccvpIcmIntNewCalls, ccvpSipAggFailedXferPost=ccvpSipAggFailedXferPost, ccvpLicAggAvgPortReqs=ccvpLicAggAvgPortReqs, ccvpTPoolRtRunningThreads=ccvpTPoolRtRunningThreads, ccvpVxmlIntIcmLookupResp=ccvpVxmlIntIcmLookupResp, ccvpJvmInfo=ccvpJvmInfo, ccvpIcmRtOfferedBasicVideoCalls=ccvpIcmRtOfferedBasicVideoCalls, ccvpEventMessageId=ccvpEventMessageId, ccvpEventText=ccvpEventText, ccvpH323Table=ccvpH323Table, ccvpH323Entry=ccvpH323Entry, ccvpReptAggSipEvents=ccvpReptAggSipEvents, ccvpSipIntPostCallAnswered=ccvpSipIntPostCallAnswered, ccvpSipRtBasicVideoOffered=ccvpSipRtBasicVideoOffered, ccvpSipAggBasicVideoOffered=ccvpSipAggBasicVideoOffered, ccvpIvrVideoTableGroup=ccvpIvrVideoTableGroup, ccvpSipRtBasicVideoAnswered=ccvpSipRtBasicVideoAnswered, ccvpCvpEventsGroup=ccvpCvpEventsGroup, ccvpTPoolRtMaxThreadsUsed=ccvpTPoolRtMaxThreadsUsed, ccvpIvrRtActiveCalls=ccvpIvrRtActiveCalls, ccvpTimeZoneOffsetMinutes=ccvpTimeZoneOffsetMinutes, ccvpVxmlIntIcmLookupSuccess=ccvpVxmlIntIcmLookupSuccess, ccvpReptAggIvrEvents=ccvpReptAggIvrEvents, ccvpLicRtPortsAvail=ccvpLicRtPortsAvail, ccvpLicAggPortReqsDenied=ccvpLicAggPortReqsDenied, ccvpSipIntGreetingFailed=ccvpSipIntGreetingFailed, ccvpServiceInfo=ccvpServiceInfo, ccvpH323RtCallsInProgress=ccvpH323RtCallsInProgress, ccvpSipIntAvgLatency1=ccvpSipIntAvgLatency1, ccvpSipIntFailedXferPost=ccvpSipIntFailedXferPost, ccvpIvrAggAgentPushedVideo=ccvpIvrAggAgentPushedVideo, ccvpIvrIntMaxHttpReqRate=ccvpIvrIntMaxHttpReqRate, ccvpSipEntry=ccvpSipEntry, ccvpH323IntCriticalMedia=ccvpH323IntCriticalMedia, ccvpIvrIntAvgHttpReqRate=ccvpIvrIntAvgHttpReqRate, ccvpReptAggDatabaseWrites=ccvpReptAggDatabaseWrites, ccvpIcmRtActiveICMLookupReqs=ccvpIcmRtActiveICMLookupReqs, ccvpIcmAggAcceptedBasicVideoCalls=ccvpIcmAggAcceptedBasicVideoCalls, ccvpJvmInfoGroup=ccvpJvmInfoGroup, ciscoCvpMIBCompliances=ciscoCvpMIBCompliances, ccvpH323TableGroup=ccvpH323TableGroup, ccvpLicIntPortReqsDenied=ccvpLicIntPortReqsDenied, ccvpH323IntAvgXferToAnswer=ccvpH323IntAvgXferToAnswer, ccvpServices=ccvpServices, ccvpLicensingInfo=ccvpLicensingInfo, ciscoCcvpMIBComplianceRev1=ciscoCcvpMIBComplianceRev1, ccvpEventState=ccvpEventState, ccvpSipTable=ccvpSipTable, ccvpIvrIntMaxActiveCalls=ccvpIvrIntMaxActiveCalls, ccvpIvrIntAvgCallLatency=ccvpIvrIntAvgCallLatency, ccvpIcmAggVruCallLegs=ccvpIcmAggVruCallLegs, ccvpSipTableGroup=ccvpSipTableGroup, ccvpSipIntBasicVideoOffered=ccvpSipIntBasicVideoOffered, ccvpReptEntry=ccvpReptEntry, ccvpVxmlAggReptEvents=ccvpVxmlAggReptEvents, ccvpIcmIntSipCallLegs=ccvpIcmIntSipCallLegs, ccvpIvrAggMaxActiveCalls=ccvpIvrAggMaxActiveCalls, ccvpIvrAggAgentInitiatedRecordings=ccvpIvrAggAgentInitiatedRecordings, ccvpIcmTable=ccvpIcmTable, ccvpSipIntConnectsRcv=ccvpSipIntConnectsRcv, ccvpIcmTableGroup=ccvpIcmTableGroup, ccvpIcmIntFullVideoCalls=ccvpIcmIntFullVideoCalls, ccvpSipRtActiveCalls=ccvpSipRtActiveCalls, ccvpH323IntMaxXferToAnswer=ccvpH323IntMaxXferToAnswer, ccvpIvrEntry=ccvpIvrEntry, ccvpServiceType=ccvpServiceType, ccvpH323IntNotTransferred=ccvpH323IntNotTransferred, ccvpLicIntPeriod=ccvpLicIntPeriod, ccvpIcmIntH323CallLegs=ccvpIcmIntH323CallLegs, ccvpVxmlIntSessions=ccvpVxmlIntSessions, ciscoCvpMIB=ciscoCvpMIB, ccvpSipAggConnectsRcv=ccvpSipAggConnectsRcv, ccvpVxmlTableGroup=ccvpVxmlTableGroup, ccvpIcmRtFullVideoCalls=ccvpIcmRtFullVideoCalls, ccvpEventSeverity=ccvpEventSeverity, ccvpEventTimestamp=ccvpEventTimestamp, ccvpVxmlIntIcmLookupFails=ccvpVxmlIntIcmLookupFails, ccvpEventHostName=ccvpEventHostName, ccvpIvrAggFullVideoCalls=ccvpIvrAggFullVideoCalls, ccvpH323IntMaxNewCallLatency=ccvpH323IntMaxNewCallLatency, ccvpIcmRtActiveSIPCallLegs=ccvpIcmRtActiveSIPCallLegs, ccvpIcmAggIcmLookupReqs=ccvpIcmAggIcmLookupReqs, PYSNMP_MODULE_ID=ciscoCvpMIB, ccvpH323IntTransferred=ccvpH323IntTransferred, ccvpLicIntMaxPortsInUse=ccvpLicIntMaxPortsInUse, ccvpGeneralInfo=ccvpGeneralInfo, ccvpSipIntNewCalls=ccvpSipIntNewCalls, CcvpServiceStatus=CcvpServiceStatus, ccvpReptIntIvrEvents=ccvpReptIntIvrEvents, ccvpLicRtPortsInUse=ccvpLicRtPortsInUse, ccvpVxmlAggIcmLookupSuccess=ccvpVxmlAggIcmLookupSuccess, ccvpOpsConsoleURL=ccvpOpsConsoleURL, ccvpVxmlTable=ccvpVxmlTable, ccvpSipAggFailedXferPre=ccvpSipAggFailedXferPre, ccvpTimeZoneOffsetHours=ccvpTimeZoneOffsetHours, ccvpIcmIntOfferedBasicVideoCalls=ccvpIcmIntOfferedBasicVideoCalls, ccvpLicAggPortReqs=ccvpLicAggPortReqs, ccvpIcmAggOfferedBasicVideoCalls=ccvpIcmAggOfferedBasicVideoCalls, ccvpIcmRtActiveH323CallLegs=ccvpIcmRtActiveH323CallLegs, ccvpEventMessageName=ccvpEventMessageName, ccvpSupportToolsURL=ccvpSupportToolsURL, ccvpServiceTable=ccvpServiceTable, ccvpH323IntNewCalls=ccvpH323IntNewCalls, ccvpSipAggAvgLatency2=ccvpSipAggAvgLatency2, ccvpLicIntAvgPortReqs=ccvpLicIntAvgPortReqs, ccvpIcmAggFullVideoCalls=ccvpIcmAggFullVideoCalls, ccvpH323IntCallsFinished=ccvpH323IntCallsFinished, ccvpTPoolRtCoreThreads=ccvpTPoolRtCoreThreads, ccvpReptTableGroup=ccvpReptTableGroup, ccvpH323IntAvgNewCallLatency=ccvpH323IntAvgNewCallLatency, ccvpJvmRtCurrMemUsed=ccvpJvmRtCurrMemUsed, ccvpServiceIntLastUpdate=ccvpServiceIntLastUpdate, ccvpSipIntBasicVideoAnswered=ccvpSipIntBasicVideoAnswered, ccvpH323IntRedirected=ccvpH323IntRedirected, ccvpIvrIntCallsFinished=ccvpIvrIntCallsFinished, ccvpSipVideoTableGroup=ccvpSipVideoTableGroup, ccvpJvmRtMaxMemAvail=ccvpJvmRtMaxMemAvail, ccvpServiceEntry=ccvpServiceEntry, ccvpIcmVideoTableGroup=ccvpIcmVideoTableGroup, ccvpVxmlAggIcmLookupFails=ccvpVxmlAggIcmLookupFails, CcvpServiceType=CcvpServiceType, ccvpGeneralInfoGroup=ccvpGeneralInfoGroup, ccvpLicPortUsageWarning=ccvpLicPortUsageWarning, ccvpJvmRtUpTime=ccvpJvmRtUpTime, CcvpIndex=CcvpIndex, ccvpIvrRtActiveHttpReqs=ccvpIvrRtActiveHttpReqs, ccvpServiceIndex=ccvpServiceIndex, ccvpSipIntAvgLatency2=ccvpSipIntAvgLatency2, ccvpIcmIntVruCallLegs=ccvpIcmIntVruCallLegs, ccvpIcmIntIcmLookupReqs=ccvpIcmIntIcmLookupReqs, ccvpSipIntGreetingAnswered=ccvpSipIntGreetingAnswered, ccvpIvrRtFullVideoCalls=ccvpIvrRtFullVideoCalls, ccvpSipIntWhisperFailed=ccvpSipIntWhisperFailed, ccvpLicIntLastUpdate=ccvpLicIntLastUpdate, ccvpSipAggNewCalls=ccvpSipAggNewCalls, ciscoCcvpMIBComplianceRev2=ciscoCcvpMIBComplianceRev2, ccvpThreadPoolInfo=ccvpThreadPoolInfo, ccvpJvmRtMaxMemUsed=ccvpJvmRtMaxMemUsed, ccvpIvrAggHttpReqs=ccvpIvrAggHttpReqs, ccvpVxmlIntIcmLookupReqs=ccvpVxmlIntIcmLookupReqs, ccvpServiceName=ccvpServiceName, ccvpTimeZoneName=ccvpTimeZoneName, ccvpLicensingInfoGroup=ccvpLicensingInfoGroup, ccvpH323RtMemoryInUse=ccvpH323RtMemoryInUse, ccvpJvmRtCurrThreadsInUse=ccvpJvmRtCurrThreadsInUse, ccvpSipIntWhisperAnswered=ccvpSipIntWhisperAnswered, ccvpIvrAggNewCalls=ccvpIvrAggNewCalls, ccvpIvrTable=ccvpIvrTable)
