#
# PySNMP MIB module CISCO-NETWORK-REGISTRAR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source http://mibs.snmplabs.com:80/asn1/CISCO-NETWORK-REGISTRAR-MIB
# Produced by pysmi-0.3.4 at Sun Apr 21 23:46:38 2019
# On host aaqrabaw platform Linux version 4.15.0-47-generic by user aaqrabaw
# Using Python version 3.6.5 (default, Apr  1 2018, 05:46:30) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter64, Counter32, ModuleIdentity, Unsigned32, MibIdentifier, NotificationType, Bits, TimeTicks, Gauge32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter64", "Counter32", "ModuleIdentity", "Unsigned32", "MibIdentifier", "NotificationType", "Bits", "TimeTicks", "Gauge32", "Integer32")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
ciscoNetworkRegistrarMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 120))
ciscoNetworkRegistrarMIB.setRevisions(('2005-03-03 00:00', '2003-01-11 00:00', '1999-06-17 00:00', '1998-11-01 00:00',))
if mibBuilder.loadTexts: ciscoNetworkRegistrarMIB.setLastUpdated('200503030000Z')
if mibBuilder.loadTexts: ciscoNetworkRegistrarMIB.setOrganization('Cisco Systems, Inc.')
ciscoNetworkRegistrarMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 120, 1))
cnrDHCP = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 1))
cnrNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 2))
cnrNotifCfgObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 3))
class CnrPhysAddress(TextualConvention, OctetString):
    reference = 'RFC 2131'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 32)

cnrDHCPScopeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 1, 1), )
if mibBuilder.loadTexts: cnrDHCPScopeTable.setStatus('deprecated')
cnrDHCPScopeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-NETWORK-REGISTRAR-MIB", "cnrDHCPScopeName"))
if mibBuilder.loadTexts: cnrDHCPScopeEntry.setStatus('deprecated')
cnrDHCPScopeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 100)))
if mibBuilder.loadTexts: cnrDHCPScopeName.setStatus('deprecated')
cnrDHCPScopeFreeAddrLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 1, 1, 1, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cnrDHCPScopeFreeAddrLowThreshold.setStatus('deprecated')
cnrDHCPScopeFreeAddrHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 1, 1, 1, 3), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cnrDHCPScopeFreeAddrHighThreshold.setStatus('deprecated')
cnrDHCPScopeFreeAddrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 1, 1, 1, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cnrDHCPScopeFreeAddrValue.setStatus('deprecated')
cnrDHCPScopeFreeAddrUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("value", 1), ("percent", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cnrDHCPScopeFreeAddrUnits.setStatus('deprecated')
cnrNotifDupIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 2, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cnrNotifDupIpAddress.setStatus('current')
cnrNotifMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 2, 2), CnrPhysAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cnrNotifMACAddress.setStatus('current')
cnrNotifServer = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 2, 3), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cnrNotifServer.setStatus('current')
cnrNotifServerType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("dns", 1), ("dhcp", 2), ("ldap", 3), ("tftp", 4), ("ccm", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cnrNotifServerType.setStatus('current')
cnrNotifDupIpAddressDetectedBy = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dhcpClient", 1), ("dhcpServer", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cnrNotifDupIpAddressDetectedBy.setStatus('current')
cnrNotifContestedIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 2, 6), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cnrNotifContestedIpAddress.setStatus('current')
cnrNotifDHCPScopeFreeAddrLow = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 2, 7), Unsigned32()).setUnits('percentage').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cnrNotifDHCPScopeFreeAddrLow.setStatus('current')
cnrNotifDHCPScopeFreeAddrHigh = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 2, 8), Unsigned32()).setUnits('percentage').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cnrNotifDHCPScopeFreeAddrHigh.setStatus('current')
cnrNotifDHCPScopeFreeAddrValue = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 2, 9), Gauge32()).setUnits('IP addresses').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cnrNotifDHCPScopeFreeAddrValue.setStatus('current')
cnrNotifDHCPThresholdType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("scope", 1), ("network", 2), ("selectionTags", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cnrNotifDHCPThresholdType.setStatus('current')
cnrNotifDHCPThresholdValue = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cnrNotifDHCPThresholdValue.setStatus('current')
cnrNotifDHCPScopeName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 2, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cnrNotifDHCPScopeName.setStatus('current')
cnrNotifPrimarySubnetNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 2, 13), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cnrNotifPrimarySubnetNumber.setStatus('current')
cnrNotifRelatedServerType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dnsPrimary", 1), ("ldap", 2), ("failoverPartner", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cnrNotifRelatedServerType.setStatus('current')
cnrNotifDnsServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 2, 15), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cnrNotifDnsServerIpAddress.setStatus('current')
cnrNotifZoneName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 2, 16), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cnrNotifZoneName.setStatus('current')
cnrNotifDnsRemoteServersList = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 2, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cnrNotifDnsRemoteServersList.setStatus('current')
cnrEnableFreeAddressLow = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 3, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnrEnableFreeAddressLow.setStatus('deprecated')
cnrEnableFreeAddressHigh = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 3, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnrEnableFreeAddressHigh.setStatus('deprecated')
cnrEnableServerStart = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 3, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnrEnableServerStart.setStatus('current')
cnrEnableServerStop = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 3, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnrEnableServerStop.setStatus('current')
cnrEnableDNSQueueTooBig = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 3, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnrEnableDNSQueueTooBig.setStatus('current')
cnrEnableOtherServerNotResponding = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 3, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnrEnableOtherServerNotResponding.setStatus('deprecated')
cnrEnableDuplicateAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 3, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnrEnableDuplicateAddress.setStatus('current')
cnrEnableAddressConflict = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 3, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnrEnableAddressConflict.setStatus('current')
cnrEnableOtherServerResponding = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 3, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnrEnableOtherServerResponding.setStatus('deprecated')
cnrEnableFailoverConfigMismatch = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 3, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnrEnableFailoverConfigMismatch.setStatus('current')
cnrEnableFreeAddrLow = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 3, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnrEnableFreeAddrLow.setStatus('current')
cnrEnableFreeAddrHigh = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 3, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnrEnableFreeAddrHigh.setStatus('current')
cnrEnableOtherServerNotResp = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 3, 13), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnrEnableOtherServerNotResp.setStatus('current')
cnrEnableOtherServerResp = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 3, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnrEnableOtherServerResp.setStatus('current')
cnrEnableHaDnsPartnerDown = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 3, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnrEnableHaDnsPartnerDown.setStatus('current')
cnrEnableHaDnsPartnerUp = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 3, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnrEnableHaDnsPartnerUp.setStatus('current')
cnrEnableMastersNotResp = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 3, 17), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnrEnableMastersNotResp.setStatus('current')
cnrEnableMastersResp = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 3, 18), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnrEnableMastersResp.setStatus('current')
cnrEnableSecondaryZoneExpired = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 3, 19), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnrEnableSecondaryZoneExpired.setStatus('current')
cnrEnableDnsForwardersNotResp = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 3, 20), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnrEnableDnsForwardersNotResp.setStatus('current')
cnrEnableDnsForwardersResp = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 3, 21), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnrEnableDnsForwardersResp.setStatus('current')
cnrEnableHaDnsConfigErr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 120, 1, 3, 22), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnrEnableHaDnsConfigErr.setStatus('current')
ciscoNetRegMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 120, 2))
ciscoNetRegMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 120, 2, 0))
ciscoNetRegFreeAddressLow = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 120, 2, 0, 1)).setObjects(("CISCO-NETWORK-REGISTRAR-MIB", "cnrDHCPScopeFreeAddrLowThreshold"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrDHCPScopeFreeAddrValue"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrDHCPScopeFreeAddrUnits"))
if mibBuilder.loadTexts: ciscoNetRegFreeAddressLow.setStatus('deprecated')
ciscoNetRegFreeAddressHigh = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 120, 2, 0, 2)).setObjects(("CISCO-NETWORK-REGISTRAR-MIB", "cnrDHCPScopeFreeAddrHighThreshold"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrDHCPScopeFreeAddrValue"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrDHCPScopeFreeAddrUnits"))
if mibBuilder.loadTexts: ciscoNetRegFreeAddressHigh.setStatus('deprecated')
ciscoNetRegServerStart = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 120, 2, 0, 3)).setObjects(("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifServerType"))
if mibBuilder.loadTexts: ciscoNetRegServerStart.setStatus('current')
ciscoNetRegServerStop = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 120, 2, 0, 4)).setObjects(("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifServerType"))
if mibBuilder.loadTexts: ciscoNetRegServerStop.setStatus('current')
ciscoNetRegDNSQueueTooBig = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 120, 2, 0, 5))
if mibBuilder.loadTexts: ciscoNetRegDNSQueueTooBig.setStatus('current')
ciscoNetRegOtherServerNotResponding = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 120, 2, 0, 6)).setObjects(("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifServer"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifServerType"))
if mibBuilder.loadTexts: ciscoNetRegOtherServerNotResponding.setStatus('deprecated')
ciscoNetRegDuplicateAddress = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 120, 2, 0, 7)).setObjects(("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDupIpAddress"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifMACAddress"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDupIpAddressDetectedBy"))
if mibBuilder.loadTexts: ciscoNetRegDuplicateAddress.setStatus('current')
ciscoNetRegAddressConflict = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 120, 2, 0, 8)).setObjects(("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifContestedIpAddress"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifServer"))
if mibBuilder.loadTexts: ciscoNetRegAddressConflict.setStatus('current')
ciscoNetRegOtherServerResponding = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 120, 2, 0, 9)).setObjects(("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifServer"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifServerType"))
if mibBuilder.loadTexts: ciscoNetRegOtherServerResponding.setStatus('deprecated')
ciscoNetRegFailoverConfigMismatch = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 120, 2, 0, 10)).setObjects(("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifServer"))
if mibBuilder.loadTexts: ciscoNetRegFailoverConfigMismatch.setStatus('current')
ciscoNetRegFreeAddrLowThreshold = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 120, 2, 0, 11)).setObjects(("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDHCPScopeFreeAddrLow"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDHCPScopeFreeAddrValue"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDHCPScopeName"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifPrimarySubnetNumber"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDHCPThresholdType"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDHCPThresholdValue"))
if mibBuilder.loadTexts: ciscoNetRegFreeAddrLowThreshold.setStatus('current')
ciscoNetRegFreeAddrHighThreshold = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 120, 2, 0, 12)).setObjects(("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDHCPScopeFreeAddrHigh"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDHCPScopeFreeAddrValue"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDHCPScopeName"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifPrimarySubnetNumber"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDHCPThresholdType"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDHCPThresholdValue"))
if mibBuilder.loadTexts: ciscoNetRegFreeAddrHighThreshold.setStatus('current')
ciscoNetRegOtherServerNotResp = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 120, 2, 0, 13)).setObjects(("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifServer"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifRelatedServerType"))
if mibBuilder.loadTexts: ciscoNetRegOtherServerNotResp.setStatus('current')
ciscoNetRegOtherServerResp = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 120, 2, 0, 14)).setObjects(("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifServer"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifRelatedServerType"))
if mibBuilder.loadTexts: ciscoNetRegOtherServerResp.setStatus('current')
ciscoNetRegHaDnsPartnerDown = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 120, 2, 0, 15)).setObjects(("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifServer"))
if mibBuilder.loadTexts: ciscoNetRegHaDnsPartnerDown.setStatus('current')
ciscoNetRegHaDnsPartnerUp = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 120, 2, 0, 16)).setObjects(("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifServer"))
if mibBuilder.loadTexts: ciscoNetRegHaDnsPartnerUp.setStatus('current')
ciscoNetRegMastersNotResp = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 120, 2, 0, 17)).setObjects(("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDnsServerIpAddress"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifZoneName"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDnsRemoteServersList"))
if mibBuilder.loadTexts: ciscoNetRegMastersNotResp.setStatus('current')
ciscoNetRegMastersResp = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 120, 2, 0, 18)).setObjects(("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDnsServerIpAddress"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifZoneName"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDnsRemoteServersList"))
if mibBuilder.loadTexts: ciscoNetRegMastersResp.setStatus('current')
ciscoNetRegSecondaryZonesExpired = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 120, 2, 0, 19)).setObjects(("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDnsServerIpAddress"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifZoneName"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDnsRemoteServersList"))
if mibBuilder.loadTexts: ciscoNetRegSecondaryZonesExpired.setStatus('current')
ciscoNetRegDnsForwardersNotResp = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 120, 2, 0, 20)).setObjects(("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDnsServerIpAddress"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDnsRemoteServersList"))
if mibBuilder.loadTexts: ciscoNetRegDnsForwardersNotResp.setStatus('current')
ciscoNetRegDnsForwardersResp = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 120, 2, 0, 21)).setObjects(("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDnsServerIpAddress"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDnsRemoteServersList"))
if mibBuilder.loadTexts: ciscoNetRegDnsForwardersResp.setStatus('current')
ciscoNetRegHaDnsConfigErr = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 120, 2, 0, 22)).setObjects(("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifServer"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifZoneName"))
if mibBuilder.loadTexts: ciscoNetRegHaDnsConfigErr.setStatus('current')
ciscoNetworkRegistrarMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 120, 3))
ciscoNetworkRegistrarMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 120, 3, 1))
ciscoNetworkRegistrarMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 120, 3, 2))
ciscoNetworkRegistrarMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 120, 3, 1, 1)).setObjects(("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetworkRegistrarDHCPScopeObjectsGroup"), ("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetworkRegistrarNotifObjectsGroup"), ("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetworkRegistrarNotifCfgObjectsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoNetworkRegistrarMIBCompliance = ciscoNetworkRegistrarMIBCompliance.setStatus('deprecated')
ciscoNetworkRegistrarMIBCompRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 120, 3, 1, 2)).setObjects(("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetRegistrarNotifInfoGroup"), ("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetRegistrarNotEnableGroup"), ("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetRegistrarNotificatGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoNetworkRegistrarMIBCompRev1 = ciscoNetworkRegistrarMIBCompRev1.setStatus('current')
ciscoNetworkRegistrarDHCPScopeObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 120, 3, 2, 1)).setObjects(("CISCO-NETWORK-REGISTRAR-MIB", "cnrDHCPScopeFreeAddrLowThreshold"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrDHCPScopeFreeAddrHighThreshold"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrDHCPScopeFreeAddrValue"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrDHCPScopeFreeAddrUnits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoNetworkRegistrarDHCPScopeObjectsGroup = ciscoNetworkRegistrarDHCPScopeObjectsGroup.setStatus('deprecated')
ciscoNetworkRegistrarNotifObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 120, 3, 2, 2)).setObjects(("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDupIpAddress"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifMACAddress"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDupIpAddressDetectedBy"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifServer"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifServerType"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifContestedIpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoNetworkRegistrarNotifObjectsGroup = ciscoNetworkRegistrarNotifObjectsGroup.setStatus('deprecated')
ciscoNetworkRegistrarNotifCfgObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 120, 3, 2, 3)).setObjects(("CISCO-NETWORK-REGISTRAR-MIB", "cnrEnableFreeAddressLow"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrEnableFreeAddressHigh"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrEnableServerStart"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrEnableServerStop"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrEnableDNSQueueTooBig"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrEnableOtherServerNotResponding"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrEnableDuplicateAddress"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrEnableAddressConflict"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrEnableOtherServerResponding"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrEnableFailoverConfigMismatch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoNetworkRegistrarNotifCfgObjectsGroup = ciscoNetworkRegistrarNotifCfgObjectsGroup.setStatus('deprecated')
ciscoNetworkRegistrarNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 120, 3, 2, 4)).setObjects(("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetRegFreeAddressLow"), ("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetRegFreeAddressHigh"), ("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetRegServerStart"), ("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetRegServerStop"), ("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetRegDNSQueueTooBig"), ("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetRegOtherServerNotResponding"), ("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetRegDuplicateAddress"), ("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetRegAddressConflict"), ("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetRegOtherServerResponding"), ("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetRegFailoverConfigMismatch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoNetworkRegistrarNotificationsGroup = ciscoNetworkRegistrarNotificationsGroup.setStatus('deprecated')
ciscoNetRegistrarNotifInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 120, 3, 2, 5)).setObjects(("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDupIpAddress"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifMACAddress"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifServer"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifServerType"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDupIpAddressDetectedBy"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifContestedIpAddress"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDHCPScopeFreeAddrLow"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDHCPScopeFreeAddrHigh"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDHCPScopeFreeAddrValue"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDHCPThresholdType"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDHCPThresholdValue"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDHCPScopeName"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifPrimarySubnetNumber"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifRelatedServerType"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDnsServerIpAddress"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifZoneName"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrNotifDnsRemoteServersList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoNetRegistrarNotifInfoGroup = ciscoNetRegistrarNotifInfoGroup.setStatus('current')
ciscoNetRegistrarNotEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 120, 3, 2, 6)).setObjects(("CISCO-NETWORK-REGISTRAR-MIB", "cnrEnableServerStart"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrEnableServerStop"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrEnableDNSQueueTooBig"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrEnableDuplicateAddress"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrEnableAddressConflict"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrEnableFailoverConfigMismatch"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrEnableFreeAddrLow"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrEnableFreeAddrHigh"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrEnableOtherServerNotResp"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrEnableOtherServerResp"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrEnableHaDnsPartnerDown"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrEnableHaDnsPartnerUp"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrEnableMastersNotResp"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrEnableMastersResp"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrEnableSecondaryZoneExpired"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrEnableDnsForwardersNotResp"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrEnableDnsForwardersResp"), ("CISCO-NETWORK-REGISTRAR-MIB", "cnrEnableHaDnsConfigErr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoNetRegistrarNotEnableGroup = ciscoNetRegistrarNotEnableGroup.setStatus('current')
ciscoNetRegistrarNotificatGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 120, 3, 2, 7)).setObjects(("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetRegServerStart"), ("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetRegServerStop"), ("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetRegDNSQueueTooBig"), ("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetRegFreeAddrLowThreshold"), ("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetRegFreeAddrHighThreshold"), ("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetRegAddressConflict"), ("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetRegDuplicateAddress"), ("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetRegOtherServerNotResp"), ("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetRegOtherServerResp"), ("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetRegFailoverConfigMismatch"), ("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetRegHaDnsPartnerDown"), ("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetRegHaDnsPartnerUp"), ("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetRegMastersNotResp"), ("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetRegMastersResp"), ("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetRegSecondaryZonesExpired"), ("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetRegDnsForwardersNotResp"), ("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetRegDnsForwardersResp"), ("CISCO-NETWORK-REGISTRAR-MIB", "ciscoNetRegHaDnsConfigErr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoNetRegistrarNotificatGroup = ciscoNetRegistrarNotificatGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-NETWORK-REGISTRAR-MIB", cnrEnableMastersResp=cnrEnableMastersResp, cnrNotifMACAddress=cnrNotifMACAddress, cnrEnableFailoverConfigMismatch=cnrEnableFailoverConfigMismatch, cnrNotifDHCPThresholdType=cnrNotifDHCPThresholdType, ciscoNetRegDuplicateAddress=ciscoNetRegDuplicateAddress, ciscoNetRegFreeAddressLow=ciscoNetRegFreeAddressLow, cnrEnableFreeAddrLow=cnrEnableFreeAddrLow, ciscoNetworkRegistrarMIBCompRev1=ciscoNetworkRegistrarMIBCompRev1, cnrDHCP=cnrDHCP, cnrEnableSecondaryZoneExpired=cnrEnableSecondaryZoneExpired, ciscoNetRegDNSQueueTooBig=ciscoNetRegDNSQueueTooBig, cnrEnableServerStop=cnrEnableServerStop, ciscoNetRegMIBNotificationPrefix=ciscoNetRegMIBNotificationPrefix, ciscoNetRegFreeAddressHigh=ciscoNetRegFreeAddressHigh, cnrNotifServer=cnrNotifServer, ciscoNetRegOtherServerResp=ciscoNetRegOtherServerResp, ciscoNetRegMIBNotifications=ciscoNetRegMIBNotifications, cnrNotifDupIpAddress=cnrNotifDupIpAddress, cnrEnableOtherServerResp=cnrEnableOtherServerResp, cnrEnableDuplicateAddress=cnrEnableDuplicateAddress, ciscoNetworkRegistrarDHCPScopeObjectsGroup=ciscoNetworkRegistrarDHCPScopeObjectsGroup, cnrEnableHaDnsPartnerUp=cnrEnableHaDnsPartnerUp, PYSNMP_MODULE_ID=ciscoNetworkRegistrarMIB, cnrEnableFreeAddressLow=cnrEnableFreeAddressLow, cnrNotifRelatedServerType=cnrNotifRelatedServerType, ciscoNetRegFreeAddrLowThreshold=ciscoNetRegFreeAddrLowThreshold, ciscoNetRegMastersResp=ciscoNetRegMastersResp, CnrPhysAddress=CnrPhysAddress, cnrNotifDHCPScopeFreeAddrLow=cnrNotifDHCPScopeFreeAddrLow, ciscoNetRegOtherServerResponding=ciscoNetRegOtherServerResponding, ciscoNetRegistrarNotEnableGroup=ciscoNetRegistrarNotEnableGroup, cnrDHCPScopeFreeAddrHighThreshold=cnrDHCPScopeFreeAddrHighThreshold, cnrNotifObjects=cnrNotifObjects, cnrEnableAddressConflict=cnrEnableAddressConflict, cnrEnableHaDnsConfigErr=cnrEnableHaDnsConfigErr, cnrNotifContestedIpAddress=cnrNotifContestedIpAddress, ciscoNetworkRegistrarNotificationsGroup=ciscoNetworkRegistrarNotificationsGroup, ciscoNetworkRegistrarMIBObjects=ciscoNetworkRegistrarMIBObjects, ciscoNetRegDnsForwardersNotResp=ciscoNetRegDnsForwardersNotResp, cnrDHCPScopeTable=cnrDHCPScopeTable, cnrNotifDupIpAddressDetectedBy=cnrNotifDupIpAddressDetectedBy, cnrNotifDHCPScopeFreeAddrValue=cnrNotifDHCPScopeFreeAddrValue, ciscoNetworkRegistrarMIBGroups=ciscoNetworkRegistrarMIBGroups, ciscoNetRegHaDnsPartnerDown=ciscoNetRegHaDnsPartnerDown, cnrEnableMastersNotResp=cnrEnableMastersNotResp, ciscoNetworkRegistrarMIBCompliance=ciscoNetworkRegistrarMIBCompliance, cnrEnableDNSQueueTooBig=cnrEnableDNSQueueTooBig, cnrNotifCfgObjects=cnrNotifCfgObjects, ciscoNetRegOtherServerNotResponding=ciscoNetRegOtherServerNotResponding, ciscoNetRegMastersNotResp=ciscoNetRegMastersNotResp, cnrEnableFreeAddressHigh=cnrEnableFreeAddressHigh, ciscoNetRegFailoverConfigMismatch=ciscoNetRegFailoverConfigMismatch, ciscoNetRegServerStart=ciscoNetRegServerStart, ciscoNetRegFreeAddrHighThreshold=ciscoNetRegFreeAddrHighThreshold, ciscoNetworkRegistrarNotifCfgObjectsGroup=ciscoNetworkRegistrarNotifCfgObjectsGroup, cnrDHCPScopeEntry=cnrDHCPScopeEntry, ciscoNetRegOtherServerNotResp=ciscoNetRegOtherServerNotResp, ciscoNetRegDnsForwardersResp=ciscoNetRegDnsForwardersResp, cnrEnableHaDnsPartnerDown=cnrEnableHaDnsPartnerDown, cnrNotifDnsRemoteServersList=cnrNotifDnsRemoteServersList, cnrNotifDHCPScopeName=cnrNotifDHCPScopeName, ciscoNetRegHaDnsConfigErr=ciscoNetRegHaDnsConfigErr, cnrEnableOtherServerNotResponding=cnrEnableOtherServerNotResponding, ciscoNetRegSecondaryZonesExpired=ciscoNetRegSecondaryZonesExpired, cnrEnableDnsForwardersNotResp=cnrEnableDnsForwardersNotResp, cnrNotifDnsServerIpAddress=cnrNotifDnsServerIpAddress, ciscoNetworkRegistrarNotifObjectsGroup=ciscoNetworkRegistrarNotifObjectsGroup, cnrDHCPScopeFreeAddrUnits=cnrDHCPScopeFreeAddrUnits, cnrEnableOtherServerNotResp=cnrEnableOtherServerNotResp, ciscoNetworkRegistrarMIBConformance=ciscoNetworkRegistrarMIBConformance, cnrDHCPScopeName=cnrDHCPScopeName, ciscoNetRegAddressConflict=ciscoNetRegAddressConflict, cnrEnableOtherServerResponding=cnrEnableOtherServerResponding, ciscoNetworkRegistrarMIB=ciscoNetworkRegistrarMIB, cnrEnableServerStart=cnrEnableServerStart, cnrEnableDnsForwardersResp=cnrEnableDnsForwardersResp, cnrNotifServerType=cnrNotifServerType, cnrNotifPrimarySubnetNumber=cnrNotifPrimarySubnetNumber, ciscoNetworkRegistrarMIBCompliances=ciscoNetworkRegistrarMIBCompliances, cnrDHCPScopeFreeAddrValue=cnrDHCPScopeFreeAddrValue, ciscoNetRegServerStop=ciscoNetRegServerStop, cnrNotifZoneName=cnrNotifZoneName, cnrNotifDHCPThresholdValue=cnrNotifDHCPThresholdValue, cnrNotifDHCPScopeFreeAddrHigh=cnrNotifDHCPScopeFreeAddrHigh, cnrDHCPScopeFreeAddrLowThreshold=cnrDHCPScopeFreeAddrLowThreshold, ciscoNetRegistrarNotificatGroup=ciscoNetRegistrarNotificatGroup, ciscoNetRegistrarNotifInfoGroup=ciscoNetRegistrarNotifInfoGroup, cnrEnableFreeAddrHigh=cnrEnableFreeAddrHigh, ciscoNetRegHaDnsPartnerUp=ciscoNetRegHaDnsPartnerUp)
