#
# PySNMP MIB module CISCO-IETF-DHCP-SERVER-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source http://mibs.snmplabs.com:80/asn1/CISCO-IETF-DHCP-SERVER-EXT-MIB
# Produced by pysmi-0.3.4 at Sun Apr 21 23:31:02 2019
# On host aaqrabaw platform Linux version 4.15.0-47-generic by user aaqrabaw
# Using Python version 3.6.5 (default, Apr  1 2018, 05:46:30) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
cDhcpv4ServerSubnetEntry, cDhcpv4ServerSubnetFreeAddrHighThreshold, cDhcpv4ServerSubnetFreeAddresses, cDhcpv4ServerSubnetFreeAddrLowThreshold, cDhcpv4ServerClientPhysicalAddress = mibBuilder.importSymbols("CISCO-IETF-DHCP-SERVER-MIB", "cDhcpv4ServerSubnetEntry", "cDhcpv4ServerSubnetFreeAddrHighThreshold", "cDhcpv4ServerSubnetFreeAddresses", "cDhcpv4ServerSubnetFreeAddrLowThreshold", "cDhcpv4ServerClientPhysicalAddress")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
ifName, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifName", "ifIndex")
InetAddressIPv4, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv4")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Unsigned32, Counter32, Integer32, TimeTicks, MibIdentifier, Bits, ObjectIdentity, IpAddress, iso, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Unsigned32", "Counter32", "Integer32", "TimeTicks", "MibIdentifier", "Bits", "ObjectIdentity", "IpAddress", "iso", "NotificationType")
TruthValue, DisplayString, TimeInterval, TextualConvention, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TimeInterval", "TextualConvention", "TimeStamp")
ciscoIetfDhcpSrvExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 122))
ciscoIetfDhcpSrvExtMIB.setRevisions(('2007-03-15 12:00', '2005-05-04 12:00',))
if mibBuilder.loadTexts: ciscoIetfDhcpSrvExtMIB.setLastUpdated('200703151200Z')
if mibBuilder.loadTexts: ciscoIetfDhcpSrvExtMIB.setOrganization('Cisco Systems, Inc.')
ciscoIetfDhcpv4SrvExtMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 122, 0))
ciscoIetfDhcpv4SrvExtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 122, 1))
ciscoIetfDhcpv4SrvExtMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 122, 2))
cDhcpv4SrvExtSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 1))
cDhcpv4ExtCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 2))
cDhcpv4IntervalCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 3))
cDhcpv4FailoverCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4))
cDhcpv4FailoverIntervalCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5))
cDhcpv4CfgObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 6))
cDhcpv4SrvStartTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4SrvStartTime.setStatus('current')
cDhcpv4SrvResetTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4SrvResetTime.setStatus('current')
cDhcpv4LeaseQueries = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 2, 1), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4LeaseQueries.setStatus('current')
cDhcpv4StatisticsResetTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 2, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4StatisticsResetTime.setStatus('current')
cDhcpv4FOPacketsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 1), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOPacketsRcvd.setStatus('current')
cDhcpv4FOBindingUpdsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOBindingUpdsRcvd.setStatus('current')
cDhcpv4FOBindingAcksRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOBindingAcksRcvd.setStatus('current')
cDhcpv4FOBindingNaksRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOBindingNaksRcvd.setStatus('current')
cDhcpv4FOPoolRequestsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOPoolRequestsRcvd.setStatus('current')
cDhcpv4FOPollsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOPollsRcvd.setStatus('current')
cDhcpv4FOUpdateRequestsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOUpdateRequestsRcvd.setStatus('current')
cDhcpv4FOUpdateDoneRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOUpdateDoneRcvd.setStatus('current')
cDhcpv4FOPacketsSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOPacketsSent.setStatus('current')
cDhcpv4FOBindingUpdatesSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOBindingUpdatesSent.setStatus('current')
cDhcpv4FOBindingAcksSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 11), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOBindingAcksSent.setStatus('current')
cDhcpv4FOBindingNaksSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 12), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOBindingNaksSent.setStatus('current')
cDhcpv4FOPoolResponsesSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 13), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOPoolResponsesSent.setStatus('current')
cDhcpv4FOPollsSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 14), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOPollsSent.setStatus('current')
cDhcpv4FOUpdateRequestsSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 15), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOUpdateRequestsSent.setStatus('current')
cDhcpv4FOUpdateDoneSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 16), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOUpdateDoneSent.setStatus('current')
cDhcpv4FOPacketsDropped = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 17), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOPacketsDropped.setStatus('current')
cDhcpv4IntDiscovers = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 3, 1), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4IntDiscovers.setStatus('current')
cDhcpv4IntOffers = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 3, 2), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4IntOffers.setStatus('current')
cDhcpv4IntRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 3, 3), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4IntRequests.setStatus('current')
cDhcpv4IntDeclines = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 3, 4), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4IntDeclines.setStatus('current')
cDhcpv4IntAcks = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 3, 5), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4IntAcks.setStatus('current')
cDhcpv4IntNaks = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 3, 6), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4IntNaks.setStatus('current')
cDhcpv4IntReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 3, 7), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4IntReleases.setStatus('current')
cDhcpv4IntInforms = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 3, 8), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4IntInforms.setStatus('current')
cDhcpv4IntLeaseQueries = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 3, 9), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4IntLeaseQueries.setStatus('current')
cDhcpv4IntReqBuffersInUse = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 3, 10), Gauge32()).setUnits('buffers').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4IntReqBuffersInUse.setStatus('current')
cDhcpv4IntRespBuffersInUse = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 3, 11), Gauge32()).setUnits('buffers').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4IntRespBuffersInUse.setStatus('current')
cDhcpv4IntEndTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 3, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4IntEndTime.setStatus('current')
cDhcpv4IntDeltaTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 3, 13), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4IntDeltaTime.setStatus('current')
cDhcpv4FOIntPacketsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 1), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntPacketsRcvd.setStatus('current')
cDhcpv4FOIntBindingUpdsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 2), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntBindingUpdsRcvd.setStatus('current')
cDhcpv4FOIntBindingAcksRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 3), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntBindingAcksRcvd.setStatus('current')
cDhcpv4FOIntBindingNaksRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 4), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntBindingNaksRcvd.setStatus('current')
cDhcpv4FOIntPoolRequestsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 5), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntPoolRequestsRcvd.setStatus('current')
cDhcpv4FOIntPollsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 6), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntPollsRcvd.setStatus('current')
cDhcpv4FOIntUpdateReqsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 7), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntUpdateReqsRcvd.setStatus('current')
cDhcpv4FOIntUpdateDoneRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 8), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntUpdateDoneRcvd.setStatus('current')
cDhcpv4FOIntPacketsSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 9), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntPacketsSent.setStatus('current')
cDhcpv4FOIntBindingUpdsSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 10), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntBindingUpdsSent.setStatus('current')
cDhcpv4FOIntBindingAcksSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 11), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntBindingAcksSent.setStatus('current')
cDhcpv4FOIntBindingNaksSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 12), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntBindingNaksSent.setStatus('current')
cDhcpv4FOIntPoolResponsesSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 13), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntPoolResponsesSent.setStatus('current')
cDhcpv4FOIntPollsSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 14), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntPollsSent.setStatus('current')
cDhcpv4FOIntUpdateReqsSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 15), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntUpdateReqsSent.setStatus('current')
cDhcpv4FOIntUpdateDoneSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 16), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntUpdateDoneSent.setStatus('current')
cDhcpv4FOIntPacketsDropped = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 17), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntPacketsDropped.setStatus('current')
cDhcpv4FOIntEndTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 18), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntEndTime.setStatus('current')
cDhcpv4FOIntDeltaTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 19), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntDeltaTime.setStatus('current')
cDhcpv4ConfigIntervalSample = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 6, 1), TimeInterval()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDhcpv4ConfigIntervalSample.setStatus('current')
cDhcpv4SrvExtSubnetTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 6, 2), )
if mibBuilder.loadTexts: cDhcpv4SrvExtSubnetTable.setStatus('current')
cDhcpv4SrvExtSubnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 6, 2, 1), )
cDhcpv4ServerSubnetEntry.registerAugmentions(("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4SrvExtSubnetEntry"))
cDhcpv4SrvExtSubnetEntry.setIndexNames(*cDhcpv4ServerSubnetEntry.getIndexNames())
if mibBuilder.loadTexts: cDhcpv4SrvExtSubnetEntry.setStatus('current')
cDhcpv4ServerDefaultRouterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 6, 2, 1, 1), InetAddressIPv4()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDhcpv4ServerDefaultRouterAddress.setStatus('current')
cDhcpv4ServerSubnetStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 6, 2, 1, 2), InetAddressIPv4()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4ServerSubnetStartAddress.setStatus('current')
cDhcpv4ServerSubnetEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 6, 2, 1, 3), InetAddressIPv4()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4ServerSubnetEndAddress.setStatus('current')
cDhcpv4ServerIfLeaseLimitEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 6, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDhcpv4ServerIfLeaseLimitEnable.setStatus('current')
cDhcpv4ServerSubnetFreeAddressLowEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 6, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDhcpv4ServerSubnetFreeAddressLowEnable.setStatus('current')
cDhcpv4ServerSubnetFreeAddressHighEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 6, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDhcpv4ServerSubnetFreeAddressHighEnable.setStatus('current')
cDhcpv4ServerIfLeaseLimitDefault = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 6, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDhcpv4ServerIfLeaseLimitDefault.setStatus('current')
cDhcpv4SrvIfCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 6, 7), )
if mibBuilder.loadTexts: cDhcpv4SrvIfCfgTable.setStatus('current')
cDhcpv4SrvIfCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 6, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cDhcpv4SrvIfCfgEntry.setStatus('current')
cDhcpv4ServerIfLeaseLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 6, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDhcpv4ServerIfLeaseLimit.setStatus('current')
cDhcpv4SrvExtNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 122, 0, 2))
cDhcpv4SrvExtNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 122, 0, 2, 0))
cDhcpv4ServerIfLeaseLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 122, 0, 2, 0, 1)).setObjects(("IF-MIB", "ifName"), ("CISCO-IETF-DHCP-SERVER-MIB", "cDhcpv4ServerClientPhysicalAddress"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4ServerIfLeaseLimit"))
if mibBuilder.loadTexts: cDhcpv4ServerIfLeaseLimitExceeded.setStatus('current')
cDhcpv4ServerSubnetFreeAddressLow = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 122, 0, 2, 0, 2)).setObjects(("CISCO-IETF-DHCP-SERVER-MIB", "cDhcpv4ServerSubnetFreeAddresses"), ("CISCO-IETF-DHCP-SERVER-MIB", "cDhcpv4ServerSubnetFreeAddrLowThreshold"))
if mibBuilder.loadTexts: cDhcpv4ServerSubnetFreeAddressLow.setStatus('current')
cDhcpv4ServerSubnetFreeAddressHigh = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 122, 0, 2, 0, 3)).setObjects(("CISCO-IETF-DHCP-SERVER-MIB", "cDhcpv4ServerSubnetFreeAddresses"), ("CISCO-IETF-DHCP-SERVER-MIB", "cDhcpv4ServerSubnetFreeAddrHighThreshold"))
if mibBuilder.loadTexts: cDhcpv4ServerSubnetFreeAddressHigh.setStatus('current')
cDhcpv4SrvExtCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 122, 2, 1))
cDhcpv4SrvExtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 122, 2, 2))
cDhcpv4SrvExtCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 122, 2, 1, 1)).setObjects(("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4SrvExtSystemObjects"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4ExtCountersGroup"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4CountersIntervalGroup"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOCountersGroup"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOCountersIntervalGroup"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4CfgObjectsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDhcpv4SrvExtCompliance = cDhcpv4SrvExtCompliance.setStatus('deprecated')
cDhcpv4SrvExtComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 122, 2, 1, 2)).setObjects(("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4SrvExtSystemObjects"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4ExtCountersGroup"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4CountersIntervalGroup"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOCountersGroup"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOCountersIntervalGroup"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4CfgObjectsGroup"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4SrvExtNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDhcpv4SrvExtComplianceRev1 = cDhcpv4SrvExtComplianceRev1.setStatus('current')
cDhcpv4SrvExtSystemObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 122, 2, 2, 1)).setObjects(("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4SrvStartTime"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4SrvResetTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDhcpv4SrvExtSystemObjects = cDhcpv4SrvExtSystemObjects.setStatus('current')
cDhcpv4ExtCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 122, 2, 2, 2)).setObjects(("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4LeaseQueries"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4StatisticsResetTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDhcpv4ExtCountersGroup = cDhcpv4ExtCountersGroup.setStatus('current')
cDhcpv4CountersIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 122, 2, 2, 3)).setObjects(("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4IntDiscovers"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4IntOffers"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4IntRequests"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4IntDeclines"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4IntAcks"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4IntNaks"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4IntInforms"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4IntLeaseQueries"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4IntReleases"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4IntRespBuffersInUse"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4IntReqBuffersInUse"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4IntEndTime"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4IntDeltaTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDhcpv4CountersIntervalGroup = cDhcpv4CountersIntervalGroup.setStatus('current')
cDhcpv4FOCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 122, 2, 2, 4)).setObjects(("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOPacketsRcvd"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOBindingUpdsRcvd"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOBindingAcksRcvd"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOBindingNaksRcvd"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOPoolRequestsRcvd"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOPollsRcvd"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOUpdateRequestsRcvd"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOUpdateDoneRcvd"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOPacketsSent"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOBindingUpdatesSent"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOBindingAcksSent"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOBindingNaksSent"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOPoolResponsesSent"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOPollsSent"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOUpdateRequestsSent"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOUpdateDoneSent"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOPacketsDropped"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDhcpv4FOCountersGroup = cDhcpv4FOCountersGroup.setStatus('current')
cDhcpv4FOCountersIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 122, 2, 2, 5)).setObjects(("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntPacketsRcvd"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntBindingUpdsRcvd"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntBindingAcksRcvd"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntBindingNaksRcvd"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntPoolRequestsRcvd"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntPollsRcvd"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntUpdateReqsRcvd"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntUpdateDoneRcvd"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntPacketsSent"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntBindingUpdsSent"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntBindingAcksSent"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntBindingNaksSent"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntPoolResponsesSent"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntPollsSent"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntUpdateReqsSent"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntUpdateDoneSent"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntPacketsDropped"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntEndTime"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntDeltaTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDhcpv4FOCountersIntervalGroup = cDhcpv4FOCountersIntervalGroup.setStatus('current')
cDhcpv4CfgObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 122, 2, 2, 6)).setObjects(("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4ConfigIntervalSample"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4ServerDefaultRouterAddress"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4ServerSubnetStartAddress"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4ServerSubnetEndAddress"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4ServerIfLeaseLimitEnable"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4ServerSubnetFreeAddressLowEnable"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4ServerSubnetFreeAddressHighEnable"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4ServerIfLeaseLimitDefault"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4ServerIfLeaseLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDhcpv4CfgObjectsGroup = cDhcpv4CfgObjectsGroup.setStatus('current')
cDhcpv4SrvExtNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 10, 122, 2, 2, 7)).setObjects(("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4ServerIfLeaseLimitExceeded"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4ServerSubnetFreeAddressLow"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4ServerSubnetFreeAddressHigh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDhcpv4SrvExtNotifyGroup = cDhcpv4SrvExtNotifyGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-IETF-DHCP-SERVER-EXT-MIB", cDhcpv4CfgObjects=cDhcpv4CfgObjects, cDhcpv4IntDiscovers=cDhcpv4IntDiscovers, cDhcpv4FOIntPollsRcvd=cDhcpv4FOIntPollsRcvd, cDhcpv4FOIntBindingUpdsSent=cDhcpv4FOIntBindingUpdsSent, cDhcpv4FOIntPacketsDropped=cDhcpv4FOIntPacketsDropped, cDhcpv4FOUpdateRequestsSent=cDhcpv4FOUpdateRequestsSent, cDhcpv4FOPacketsDropped=cDhcpv4FOPacketsDropped, cDhcpv4FOUpdateDoneSent=cDhcpv4FOUpdateDoneSent, cDhcpv4SrvIfCfgEntry=cDhcpv4SrvIfCfgEntry, cDhcpv4IntNaks=cDhcpv4IntNaks, cDhcpv4IntReqBuffersInUse=cDhcpv4IntReqBuffersInUse, cDhcpv4FOPacketsSent=cDhcpv4FOPacketsSent, cDhcpv4FOIntBindingUpdsRcvd=cDhcpv4FOIntBindingUpdsRcvd, cDhcpv4FOIntUpdateDoneSent=cDhcpv4FOIntUpdateDoneSent, cDhcpv4FOIntEndTime=cDhcpv4FOIntEndTime, cDhcpv4ExtCountersGroup=cDhcpv4ExtCountersGroup, cDhcpv4StatisticsResetTime=cDhcpv4StatisticsResetTime, cDhcpv4FOCountersIntervalGroup=cDhcpv4FOCountersIntervalGroup, cDhcpv4ServerIfLeaseLimitEnable=cDhcpv4ServerIfLeaseLimitEnable, cDhcpv4SrvExtNotifyPrefix=cDhcpv4SrvExtNotifyPrefix, cDhcpv4ServerSubnetFreeAddressHighEnable=cDhcpv4ServerSubnetFreeAddressHighEnable, cDhcpv4FailoverCounters=cDhcpv4FailoverCounters, cDhcpv4FOIntUpdateReqsSent=cDhcpv4FOIntUpdateReqsSent, cDhcpv4FOIntPacketsRcvd=cDhcpv4FOIntPacketsRcvd, PYSNMP_MODULE_ID=ciscoIetfDhcpSrvExtMIB, cDhcpv4IntDeltaTime=cDhcpv4IntDeltaTime, cDhcpv4SrvExtSubnetTable=cDhcpv4SrvExtSubnetTable, cDhcpv4FOBindingNaksSent=cDhcpv4FOBindingNaksSent, cDhcpv4FOBindingNaksRcvd=cDhcpv4FOBindingNaksRcvd, cDhcpv4CountersIntervalGroup=cDhcpv4CountersIntervalGroup, cDhcpv4FOCountersGroup=cDhcpv4FOCountersGroup, cDhcpv4FOPoolRequestsRcvd=cDhcpv4FOPoolRequestsRcvd, cDhcpv4FOPollsRcvd=cDhcpv4FOPollsRcvd, cDhcpv4FailoverIntervalCounters=cDhcpv4FailoverIntervalCounters, cDhcpv4ServerSubnetEndAddress=cDhcpv4ServerSubnetEndAddress, cDhcpv4SrvExtNotify=cDhcpv4SrvExtNotify, cDhcpv4FOUpdateDoneRcvd=cDhcpv4FOUpdateDoneRcvd, cDhcpv4LeaseQueries=cDhcpv4LeaseQueries, cDhcpv4IntAcks=cDhcpv4IntAcks, ciscoIetfDhcpv4SrvExtMIBNotifs=ciscoIetfDhcpv4SrvExtMIBNotifs, cDhcpv4IntRequests=cDhcpv4IntRequests, cDhcpv4IntReleases=cDhcpv4IntReleases, cDhcpv4FOIntBindingNaksRcvd=cDhcpv4FOIntBindingNaksRcvd, cDhcpv4FOBindingAcksRcvd=cDhcpv4FOBindingAcksRcvd, cDhcpv4FOBindingAcksSent=cDhcpv4FOBindingAcksSent, cDhcpv4FOUpdateRequestsRcvd=cDhcpv4FOUpdateRequestsRcvd, cDhcpv4FOIntUpdateReqsRcvd=cDhcpv4FOIntUpdateReqsRcvd, cDhcpv4IntLeaseQueries=cDhcpv4IntLeaseQueries, ciscoIetfDhcpv4SrvExtMIBObjects=ciscoIetfDhcpv4SrvExtMIBObjects, cDhcpv4SrvStartTime=cDhcpv4SrvStartTime, cDhcpv4SrvExtSystemObjects=cDhcpv4SrvExtSystemObjects, cDhcpv4FOIntBindingAcksSent=cDhcpv4FOIntBindingAcksSent, cDhcpv4ServerDefaultRouterAddress=cDhcpv4ServerDefaultRouterAddress, cDhcpv4ServerSubnetFreeAddressLowEnable=cDhcpv4ServerSubnetFreeAddressLowEnable, cDhcpv4FOBindingUpdsRcvd=cDhcpv4FOBindingUpdsRcvd, cDhcpv4ServerIfLeaseLimitDefault=cDhcpv4ServerIfLeaseLimitDefault, cDhcpv4SrvExtGroups=cDhcpv4SrvExtGroups, cDhcpv4IntInforms=cDhcpv4IntInforms, cDhcpv4ServerSubnetFreeAddressLow=cDhcpv4ServerSubnetFreeAddressLow, cDhcpv4SrvResetTime=cDhcpv4SrvResetTime, cDhcpv4SrvExtSystem=cDhcpv4SrvExtSystem, cDhcpv4SrvIfCfgTable=cDhcpv4SrvIfCfgTable, cDhcpv4FOBindingUpdatesSent=cDhcpv4FOBindingUpdatesSent, cDhcpv4FOIntPollsSent=cDhcpv4FOIntPollsSent, cDhcpv4FOIntBindingNaksSent=cDhcpv4FOIntBindingNaksSent, cDhcpv4ConfigIntervalSample=cDhcpv4ConfigIntervalSample, cDhcpv4SrvExtSubnetEntry=cDhcpv4SrvExtSubnetEntry, ciscoIetfDhcpSrvExtMIB=ciscoIetfDhcpSrvExtMIB, cDhcpv4IntEndTime=cDhcpv4IntEndTime, cDhcpv4FOIntPacketsSent=cDhcpv4FOIntPacketsSent, cDhcpv4ServerSubnetFreeAddressHigh=cDhcpv4ServerSubnetFreeAddressHigh, cDhcpv4FOIntPoolRequestsRcvd=cDhcpv4FOIntPoolRequestsRcvd, cDhcpv4IntervalCounters=cDhcpv4IntervalCounters, cDhcpv4SrvExtComplianceRev1=cDhcpv4SrvExtComplianceRev1, cDhcpv4SrvExtCompliance=cDhcpv4SrvExtCompliance, cDhcpv4ServerIfLeaseLimit=cDhcpv4ServerIfLeaseLimit, cDhcpv4SrvExtCompliances=cDhcpv4SrvExtCompliances, cDhcpv4FOIntBindingAcksRcvd=cDhcpv4FOIntBindingAcksRcvd, cDhcpv4CfgObjectsGroup=cDhcpv4CfgObjectsGroup, cDhcpv4ExtCounters=cDhcpv4ExtCounters, cDhcpv4IntRespBuffersInUse=cDhcpv4IntRespBuffersInUse, ciscoIetfDhcpv4SrvExtMIBConform=ciscoIetfDhcpv4SrvExtMIBConform, cDhcpv4FOPacketsRcvd=cDhcpv4FOPacketsRcvd, cDhcpv4FOIntPoolResponsesSent=cDhcpv4FOIntPoolResponsesSent, cDhcpv4FOIntUpdateDoneRcvd=cDhcpv4FOIntUpdateDoneRcvd, cDhcpv4SrvExtNotifyGroup=cDhcpv4SrvExtNotifyGroup, cDhcpv4ServerIfLeaseLimitExceeded=cDhcpv4ServerIfLeaseLimitExceeded, cDhcpv4FOIntDeltaTime=cDhcpv4FOIntDeltaTime, cDhcpv4IntOffers=cDhcpv4IntOffers, cDhcpv4FOPoolResponsesSent=cDhcpv4FOPoolResponsesSent, cDhcpv4IntDeclines=cDhcpv4IntDeclines, cDhcpv4FOPollsSent=cDhcpv4FOPollsSent, cDhcpv4ServerSubnetStartAddress=cDhcpv4ServerSubnetStartAddress)
