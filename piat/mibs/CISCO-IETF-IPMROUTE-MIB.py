#
# PySNMP MIB module CISCO-IETF-IPMROUTE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source http://mibs.snmplabs.com:80/asn1/CISCO-IETF-IPMROUTE-MIB
# Produced by pysmi-0.3.4 at Sun Apr 21 23:36:07 2019
# On host aaqrabaw platform Linux version 4.15.0-47-generic by user aaqrabaw
# Using Python version 3.6.5 (default, Apr  1 2018, 05:46:30) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
IANAipRouteProtocol, IANAipMRouteProtocol = mibBuilder.importSymbols("IANA-RTPROTO-MIB", "IANAipRouteProtocol", "IANAipMRouteProtocol")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
InetVersion, InetAddress, InetAddressPrefixLength, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetVersion", "InetAddress", "InetAddressPrefixLength", "InetAddressType")
LanguageTag, = mibBuilder.importSymbols("IPMROUTE-STD-MIB", "LanguageTag")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
NotificationType, Counter32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity, ModuleIdentity, iso, Unsigned32, Integer32, IpAddress, Counter64, TimeTicks, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity", "ModuleIdentity", "iso", "Unsigned32", "Integer32", "IpAddress", "Counter64", "TimeTicks", "MibIdentifier")
DisplayString, TextualConvention, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus", "TruthValue")
ciscoIetfIpMRouteMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 117))
ciscoIetfIpMRouteMIB.setRevisions(('2006-08-24 00:00', '2004-12-02 00:00',))
if mibBuilder.loadTexts: ciscoIetfIpMRouteMIB.setLastUpdated('200608240000Z')
if mibBuilder.loadTexts: ciscoIetfIpMRouteMIB.setOrganization('Cisco Systems, Inc.')
cIpMRouteMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 117, 1))
cIpMRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1))
cIpMRouteEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cIpMRouteEnable.setStatus('current')
cIpMRouteEntryCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpMRouteEntryCount.setStatus('current')
cIpMRouteTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 2), )
if mibBuilder.loadTexts: cIpMRouteTable.setStatus('current')
cIpMRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-IETF-IPMROUTE-MIB", "cIpMRouteAddrType"), (0, "CISCO-IETF-IPMROUTE-MIB", "cIpMRouteGroup"), (0, "CISCO-IETF-IPMROUTE-MIB", "cIpMRouteSource"), (0, "CISCO-IETF-IPMROUTE-MIB", "cIpMRouteSourceMask"))
if mibBuilder.loadTexts: cIpMRouteEntry.setStatus('current')
cIpMRouteAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cIpMRouteAddrType.setStatus('current')
cIpMRouteGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 2, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: cIpMRouteGroup.setStatus('current')
cIpMRouteSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 2, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: cIpMRouteSource.setStatus('current')
cIpMRouteSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 2, 1, 4), InetAddressPrefixLength())
if mibBuilder.loadTexts: cIpMRouteSourceMask.setStatus('current')
cIpMRouteUpstreamNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 2, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpMRouteUpstreamNeighbor.setStatus('current')
cIpMRouteInIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 2, 1, 6), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpMRouteInIfIndex.setStatus('current')
cIpMRouteUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 2, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpMRouteUpTime.setStatus('current')
cIpMRouteExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 2, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpMRouteExpiryTime.setStatus('current')
cIpMRoutePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpMRoutePkts.setStatus('current')
cIpMRouteDifferentInIfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpMRouteDifferentInIfPackets.setStatus('current')
cIpMRouteOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpMRouteOctets.setStatus('current')
cIpMRouteProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 2, 1, 12), IANAipMRouteProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpMRouteProtocol.setStatus('current')
cIpMRouteRtProto = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 2, 1, 13), IANAipRouteProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpMRouteRtProto.setStatus('current')
cIpMRouteRtAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 2, 1, 14), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpMRouteRtAddress.setStatus('current')
cIpMRouteRtMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 2, 1, 15), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpMRouteRtMask.setStatus('current')
cIpMRouteRtType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unicast", 1), ("multicast", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpMRouteRtType.setStatus('current')
cIpMRouteHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpMRouteHCOctets.setStatus('current')
cIpMRouteNextHopTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 3), )
if mibBuilder.loadTexts: cIpMRouteNextHopTable.setStatus('current')
cIpMRouteNextHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-IETF-IPMROUTE-MIB", "cIpMRouteNextHopAddrType"), (0, "CISCO-IETF-IPMROUTE-MIB", "cIpMRouteNextHopGroup"), (0, "CISCO-IETF-IPMROUTE-MIB", "cIpMRouteNextHopSource"), (0, "CISCO-IETF-IPMROUTE-MIB", "cIpMRouteNextHopSourceMask"), (0, "CISCO-IETF-IPMROUTE-MIB", "cIpMRouteNextHopIfIndex"), (0, "CISCO-IETF-IPMROUTE-MIB", "cIpMRouteNextHopAddress"))
if mibBuilder.loadTexts: cIpMRouteNextHopEntry.setStatus('current')
cIpMRouteNextHopAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 3, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cIpMRouteNextHopAddrType.setStatus('current')
cIpMRouteNextHopGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 3, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: cIpMRouteNextHopGroup.setStatus('current')
cIpMRouteNextHopSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 3, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: cIpMRouteNextHopSource.setStatus('current')
cIpMRouteNextHopSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 3, 1, 4), InetAddressPrefixLength())
if mibBuilder.loadTexts: cIpMRouteNextHopSourceMask.setStatus('current')
cIpMRouteNextHopIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 3, 1, 5), InterfaceIndex())
if mibBuilder.loadTexts: cIpMRouteNextHopIfIndex.setStatus('current')
cIpMRouteNextHopAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 3, 1, 6), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: cIpMRouteNextHopAddress.setStatus('current')
cIpMRouteNextHopState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pruned", 1), ("forwarding", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpMRouteNextHopState.setStatus('current')
cIpMRouteNextHopUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 3, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpMRouteNextHopUpTime.setStatus('current')
cIpMRouteNextHopExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 3, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpMRouteNextHopExpiryTime.setStatus('current')
cIpMRouteNextHopClosestHops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpMRouteNextHopClosestHops.setStatus('current')
cIpMRouteNextHopProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 3, 1, 11), IANAipMRouteProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpMRouteNextHopProtocol.setStatus('current')
cIpMRouteNextHopPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpMRouteNextHopPkts.setStatus('current')
cIpMRouteInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 4), )
if mibBuilder.loadTexts: cIpMRouteInterfaceTable.setStatus('current')
cIpMRouteInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-IETF-IPMROUTE-MIB", "cIpMRouteInterfaceIfIndex"), (0, "CISCO-IETF-IPMROUTE-MIB", "cIpMRouteInterfaceIPVersion"))
if mibBuilder.loadTexts: cIpMRouteInterfaceEntry.setStatus('current')
cIpMRouteInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cIpMRouteInterfaceIfIndex.setStatus('current')
cIpMRouteInterfaceIPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 4, 1, 2), InetVersion())
if mibBuilder.loadTexts: cIpMRouteInterfaceIPVersion.setStatus('current')
cIpMRouteInterfaceTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cIpMRouteInterfaceTtl.setStatus('current')
cIpMRouteInterfaceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 4, 1, 4), IANAipMRouteProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpMRouteInterfaceProtocol.setStatus('current')
cIpMRouteInterfaceRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cIpMRouteInterfaceRateLimit.setStatus('current')
cIpMRouteInterfaceInMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpMRouteInterfaceInMcastPkts.setStatus('current')
cIpMRouteInterfaceOutMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpMRouteInterfaceOutMcastPkts.setStatus('current')
cIpMRouteInterfaceInMcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpMRouteInterfaceInMcastOctets.setStatus('current')
cIpMRouteInterfaceOutMcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpMRouteInterfaceOutMcastOctets.setStatus('current')
cIpMRouteInterfaceHCInMOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpMRouteInterfaceHCInMOctets.setStatus('current')
cIpMRouteInterfaceHCOutMOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpMRouteInterfaceHCOutMOctets.setStatus('current')
cIpMRouteInterfaceHCInMPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpMRouteInterfaceHCInMPkts.setStatus('current')
cIpMRouteInterfaceHCOutMPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpMRouteInterfaceHCOutMPkts.setStatus('current')
cIpMRouteBoundaryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 5), )
if mibBuilder.loadTexts: cIpMRouteBoundaryTable.setStatus('current')
cIpMRouteBoundaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 5, 1), ).setIndexNames((0, "CISCO-IETF-IPMROUTE-MIB", "cIpMRouteBoundaryScopeId"), (0, "CISCO-IETF-IPMROUTE-MIB", "cIpMRouteBoundaryIfIndex"), (0, "CISCO-IETF-IPMROUTE-MIB", "cIpMRouteBoundaryAddressType"), (0, "CISCO-IETF-IPMROUTE-MIB", "cIpMRouteBoundaryAddress"), (0, "CISCO-IETF-IPMROUTE-MIB", "cIpMRouteBoundaryAddressMask"))
if mibBuilder.loadTexts: cIpMRouteBoundaryEntry.setStatus('current')
cIpMRouteBoundaryScopeId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: cIpMRouteBoundaryScopeId.setStatus('current')
cIpMRouteBoundaryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 5, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: cIpMRouteBoundaryIfIndex.setStatus('current')
cIpMRouteBoundaryAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 5, 1, 3), InetAddressType())
if mibBuilder.loadTexts: cIpMRouteBoundaryAddressType.setStatus('current')
cIpMRouteBoundaryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 5, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: cIpMRouteBoundaryAddress.setStatus('current')
cIpMRouteBoundaryAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 5, 1, 5), InetAddressPrefixLength())
if mibBuilder.loadTexts: cIpMRouteBoundaryAddressMask.setStatus('current')
cIpMRouteBoundaryNameString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 5, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIpMRouteBoundaryNameString.setStatus('current')
cIpMRouteBoundaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 5, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIpMRouteBoundaryStatus.setStatus('current')
cIpMRouteScopeNameTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 6), )
if mibBuilder.loadTexts: cIpMRouteScopeNameTable.setStatus('current')
cIpMRouteScopeNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 6, 1), ).setIndexNames((0, "CISCO-IETF-IPMROUTE-MIB", "cIpMRouteScopeNameAddressType"), (0, "CISCO-IETF-IPMROUTE-MIB", "cIpMRouteScopeNameAddress"), (0, "CISCO-IETF-IPMROUTE-MIB", "cIpMRouteScopeNameAddressMask"), (1, "CISCO-IETF-IPMROUTE-MIB", "cIpMRouteScopeNameLanguage"))
if mibBuilder.loadTexts: cIpMRouteScopeNameEntry.setStatus('current')
cIpMRouteScopeNameAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 6, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cIpMRouteScopeNameAddressType.setStatus('current')
cIpMRouteScopeNameAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 6, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: cIpMRouteScopeNameAddress.setStatus('current')
cIpMRouteScopeNameAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 6, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: cIpMRouteScopeNameAddressMask.setStatus('current')
cIpMRouteScopeNameLanguage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 6, 1, 4), LanguageTag())
if mibBuilder.loadTexts: cIpMRouteScopeNameLanguage.setStatus('current')
cIpMRouteScopeNameString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 6, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIpMRouteScopeNameString.setStatus('current')
cIpMRouteScopeNameDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 6, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIpMRouteScopeNameDefault.setStatus('current')
cIpMRouteScopeNameStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 117, 1, 1, 6, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIpMRouteScopeNameStatus.setStatus('current')
cIpMRouteMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 117, 2))
cIpMRouteMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 117, 2, 1))
cIpMRouteMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 117, 2, 2))
cIpMRouteMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 117, 2, 1, 1)).setObjects(("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteMIBBasicGroup"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteMIBRouteGroup"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteMIBBoundaryGroup"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteMIBHCInterfaceGroup"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteMIBHopCountGroup"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteMIBPktsOutGroup"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteMIBPktsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIpMRouteMIBCompliance = cIpMRouteMIBCompliance.setStatus('deprecated')
cIpMRouteMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 117, 2, 1, 2)).setObjects(("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteMIBBasicGroup"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteMIBRouteGroup"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteMIBBoundaryGroup"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteMIBHCInterfaceGroup"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteMIBHopCountGroup"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteMIBPktsOutGroup"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteMIBPktsGroup"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteMIBHCInterfaceGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIpMRouteMIBComplianceRev1 = cIpMRouteMIBComplianceRev1.setStatus('current')
cIpMRouteMIBBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 117, 2, 2, 1)).setObjects(("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteEnable"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteEntryCount"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteUpstreamNeighbor"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteInIfIndex"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteUpTime"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteExpiryTime"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteNextHopState"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteNextHopUpTime"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteNextHopExpiryTime"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteNextHopProtocol"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteInterfaceTtl"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteInterfaceProtocol"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteInterfaceRateLimit"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteInterfaceInMcastPkts"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteInterfaceOutMcastPkts"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteInterfaceInMcastOctets"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteInterfaceOutMcastOctets"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteProtocol"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIpMRouteMIBBasicGroup = cIpMRouteMIBBasicGroup.setStatus('current')
cIpMRouteMIBHopCountGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 117, 2, 2, 2)).setObjects(("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteNextHopClosestHops"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIpMRouteMIBHopCountGroup = cIpMRouteMIBHopCountGroup.setStatus('current')
cIpMRouteMIBBoundaryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 117, 2, 2, 3)).setObjects(("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteBoundaryStatus"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteScopeNameString"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteScopeNameDefault"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteScopeNameStatus"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteBoundaryNameString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIpMRouteMIBBoundaryGroup = cIpMRouteMIBBoundaryGroup.setStatus('current')
cIpMRouteMIBPktsOutGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 117, 2, 2, 4)).setObjects(("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteNextHopPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIpMRouteMIBPktsOutGroup = cIpMRouteMIBPktsOutGroup.setStatus('current')
cIpMRouteMIBHCInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 117, 2, 2, 5)).setObjects(("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteInterfaceHCInMOctets"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteInterfaceHCOutMOctets"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteHCOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIpMRouteMIBHCInterfaceGroup = cIpMRouteMIBHCInterfaceGroup.setStatus('current')
cIpMRouteMIBRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 117, 2, 2, 6)).setObjects(("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteRtProto"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteRtAddress"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteRtMask"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteRtType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIpMRouteMIBRouteGroup = cIpMRouteMIBRouteGroup.setStatus('current')
cIpMRouteMIBPktsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 117, 2, 2, 7)).setObjects(("CISCO-IETF-IPMROUTE-MIB", "cIpMRoutePkts"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteDifferentInIfPackets"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIpMRouteMIBPktsGroup = cIpMRouteMIBPktsGroup.setStatus('current')
cIpMRouteMIBHCInterfaceGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 117, 2, 2, 8)).setObjects(("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteInterfaceHCInMPkts"), ("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteInterfaceHCOutMPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIpMRouteMIBHCInterfaceGroupSup1 = cIpMRouteMIBHCInterfaceGroupSup1.setStatus('current')
mibBuilder.exportSymbols("CISCO-IETF-IPMROUTE-MIB", cIpMRouteScopeNameAddress=cIpMRouteScopeNameAddress, cIpMRouteMIBRouteGroup=cIpMRouteMIBRouteGroup, cIpMRouteScopeNameEntry=cIpMRouteScopeNameEntry, cIpMRouteScopeNameLanguage=cIpMRouteScopeNameLanguage, cIpMRouteExpiryTime=cIpMRouteExpiryTime, cIpMRouteGroup=cIpMRouteGroup, cIpMRouteNextHopIfIndex=cIpMRouteNextHopIfIndex, cIpMRouteNextHopUpTime=cIpMRouteNextHopUpTime, cIpMRouteInterfaceIfIndex=cIpMRouteInterfaceIfIndex, cIpMRouteInterfaceTtl=cIpMRouteInterfaceTtl, cIpMRouteInterfaceHCOutMOctets=cIpMRouteInterfaceHCOutMOctets, cIpMRouteBoundaryStatus=cIpMRouteBoundaryStatus, cIpMRouteBoundaryScopeId=cIpMRouteBoundaryScopeId, cIpMRoutePkts=cIpMRoutePkts, cIpMRouteNextHopSourceMask=cIpMRouteNextHopSourceMask, cIpMRouteInterfaceTable=cIpMRouteInterfaceTable, cIpMRouteMIBHCInterfaceGroup=cIpMRouteMIBHCInterfaceGroup, cIpMRouteBoundaryIfIndex=cIpMRouteBoundaryIfIndex, cIpMRouteNextHopState=cIpMRouteNextHopState, cIpMRouteRtAddress=cIpMRouteRtAddress, cIpMRouteMIBConformance=cIpMRouteMIBConformance, cIpMRouteInterfaceRateLimit=cIpMRouteInterfaceRateLimit, cIpMRouteScopeNameDefault=cIpMRouteScopeNameDefault, cIpMRouteInterfaceEntry=cIpMRouteInterfaceEntry, cIpMRouteTable=cIpMRouteTable, cIpMRouteEnable=cIpMRouteEnable, cIpMRouteDifferentInIfPackets=cIpMRouteDifferentInIfPackets, cIpMRouteMIBCompliance=cIpMRouteMIBCompliance, cIpMRouteScopeNameTable=cIpMRouteScopeNameTable, ciscoIetfIpMRouteMIB=ciscoIetfIpMRouteMIB, cIpMRouteMIBPktsOutGroup=cIpMRouteMIBPktsOutGroup, PYSNMP_MODULE_ID=ciscoIetfIpMRouteMIB, cIpMRouteBoundaryAddressType=cIpMRouteBoundaryAddressType, cIpMRouteInterfaceHCInMPkts=cIpMRouteInterfaceHCInMPkts, cIpMRouteNextHopExpiryTime=cIpMRouteNextHopExpiryTime, cIpMRouteMIBObjects=cIpMRouteMIBObjects, cIpMRouteEntry=cIpMRouteEntry, cIpMRouteBoundaryAddressMask=cIpMRouteBoundaryAddressMask, cIpMRouteNextHopAddress=cIpMRouteNextHopAddress, cIpMRouteAddrType=cIpMRouteAddrType, cIpMRouteMIBHCInterfaceGroupSup1=cIpMRouteMIBHCInterfaceGroupSup1, cIpMRouteMIBHopCountGroup=cIpMRouteMIBHopCountGroup, cIpMRouteInterfaceHCInMOctets=cIpMRouteInterfaceHCInMOctets, cIpMRouteNextHopSource=cIpMRouteNextHopSource, cIpMRouteMIBCompliances=cIpMRouteMIBCompliances, cIpMRouteInterfaceHCOutMPkts=cIpMRouteInterfaceHCOutMPkts, cIpMRouteBoundaryNameString=cIpMRouteBoundaryNameString, cIpMRouteScopeNameAddressMask=cIpMRouteScopeNameAddressMask, cIpMRouteMIBComplianceRev1=cIpMRouteMIBComplianceRev1, cIpMRouteInterfaceOutMcastPkts=cIpMRouteInterfaceOutMcastPkts, cIpMRouteMIBPktsGroup=cIpMRouteMIBPktsGroup, cIpMRouteInterfaceProtocol=cIpMRouteInterfaceProtocol, cIpMRouteScopeNameAddressType=cIpMRouteScopeNameAddressType, cIpMRouteRtMask=cIpMRouteRtMask, cIpMRouteNextHopProtocol=cIpMRouteNextHopProtocol, cIpMRouteMIBBasicGroup=cIpMRouteMIBBasicGroup, cIpMRouteBoundaryEntry=cIpMRouteBoundaryEntry, cIpMRouteScopeNameStatus=cIpMRouteScopeNameStatus, cIpMRouteUpTime=cIpMRouteUpTime, cIpMRouteRtType=cIpMRouteRtType, cIpMRoute=cIpMRoute, cIpMRouteProtocol=cIpMRouteProtocol, cIpMRouteNextHopTable=cIpMRouteNextHopTable, cIpMRouteHCOctets=cIpMRouteHCOctets, cIpMRouteRtProto=cIpMRouteRtProto, cIpMRouteEntryCount=cIpMRouteEntryCount, cIpMRouteUpstreamNeighbor=cIpMRouteUpstreamNeighbor, cIpMRouteInterfaceIPVersion=cIpMRouteInterfaceIPVersion, cIpMRouteBoundaryAddress=cIpMRouteBoundaryAddress, cIpMRouteOctets=cIpMRouteOctets, cIpMRouteBoundaryTable=cIpMRouteBoundaryTable, cIpMRouteInterfaceInMcastPkts=cIpMRouteInterfaceInMcastPkts, cIpMRouteSource=cIpMRouteSource, cIpMRouteInIfIndex=cIpMRouteInIfIndex, cIpMRouteNextHopClosestHops=cIpMRouteNextHopClosestHops, cIpMRouteScopeNameString=cIpMRouteScopeNameString, cIpMRouteNextHopAddrType=cIpMRouteNextHopAddrType, cIpMRouteNextHopPkts=cIpMRouteNextHopPkts, cIpMRouteInterfaceInMcastOctets=cIpMRouteInterfaceInMcastOctets, cIpMRouteMIBBoundaryGroup=cIpMRouteMIBBoundaryGroup, cIpMRouteNextHopEntry=cIpMRouteNextHopEntry, cIpMRouteNextHopGroup=cIpMRouteNextHopGroup, cIpMRouteInterfaceOutMcastOctets=cIpMRouteInterfaceOutMcastOctets, cIpMRouteSourceMask=cIpMRouteSourceMask, cIpMRouteMIBGroups=cIpMRouteMIBGroups)
