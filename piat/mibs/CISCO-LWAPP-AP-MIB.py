#
# PySNMP MIB module CISCO-LWAPP-AP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source http://mibs.snmplabs.com:80/asn1/CISCO-LWAPP-AP-MIB
# Produced by pysmi-0.3.4 at Sun Apr 21 23:48:43 2019
# On host aaqrabaw platform Linux version 4.15.0-47-generic by user aaqrabaw
# Using Python version 3.6.5 (default, Apr  1 2018, 05:46:30) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
cldRegulatoryDomain, = mibBuilder.importSymbols("CISCO-LWAPP-DOT11-MIB", "cldRegulatoryDomain")
CLApDot11RadioRole, CLApIfType, CLDot11Channel, CLApDot11RadioSubband, CLApAssocFailureReason = mibBuilder.importSymbols("CISCO-LWAPP-TC-MIB", "CLApDot11RadioRole", "CLApIfType", "CLDot11Channel", "CLApDot11RadioSubband", "CLApAssocFailureReason")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
PhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex")
InetPortNumber, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter64, Counter32, ObjectIdentity, IpAddress, Gauge32, Bits, ModuleIdentity, iso, TimeTicks, NotificationType, MibIdentifier, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Counter32", "ObjectIdentity", "IpAddress", "Gauge32", "Bits", "ModuleIdentity", "iso", "TimeTicks", "NotificationType", "MibIdentifier", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32")
MacAddress, TruthValue, TextualConvention, TimeInterval, DisplayString, RowStatus, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TruthValue", "TextualConvention", "TimeInterval", "DisplayString", "RowStatus", "TimeStamp")
ciscoLwappApMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 513))
ciscoLwappApMIB.setRevisions(('2012-06-13 00:00', '2011-02-07 00:00', '2011-01-21 00:00', '2011-01-10 00:00', '2010-12-13 00:00', '2010-08-19 00:00', '2007-01-03 00:00', '2006-07-18 00:00', '2006-03-30 00:00',))
if mibBuilder.loadTexts: ciscoLwappApMIB.setLastUpdated('201206130000Z')
if mibBuilder.loadTexts: ciscoLwappApMIB.setOrganization('Cisco Systems Inc.')
ciscoLwappApMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 0))
ciscoLwappApMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 1))
ciscoLwappApMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 2))
ciscoLwappApMIBNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 3))
ciscoLwappAp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1))
ciscoLwappApIf = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2))
ciscoLwappApGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3))
ciscoLwappApCredentials = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 4))
ciscoLwappLinkLatency = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 5))
ciscoLwappSpectrum = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6))
ciscoLwappAp802dot1xSupplicant = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 7))
cLApTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1), )
if mibBuilder.loadTexts: cLApTable.setStatus('current')
cLApEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"))
if mibBuilder.loadTexts: cLApEntry.setStatus('current')
cLApSysMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: cLApSysMacAddress.setStatus('current')
cLApIfMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApIfMacAddress.setStatus('current')
cLApMaxNumberOfDot11Slots = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApMaxNumberOfDot11Slots.setStatus('current')
cLApEntPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 4), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEntPhysicalIndex.setStatus('current')
cLApName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApName.setStatus('current')
cLApUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApUpTime.setStatus('current')
cLLwappUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLLwappUpTime.setStatus('current')
cLLwappJoinTakenTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLLwappJoinTakenTime.setStatus('current')
cLApMaxNumberOfEthernetSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApMaxNumberOfEthernetSlots.setStatus('current')
cLApPrimaryControllerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 10), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApPrimaryControllerAddressType.setStatus('current')
cLApPrimaryControllerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 11), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApPrimaryControllerAddress.setStatus('current')
cLApSecondaryControllerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 12), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApSecondaryControllerAddressType.setStatus('current')
cLApSecondaryControllerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 13), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApSecondaryControllerAddress.setStatus('current')
cLApTertiaryControllerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 14), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApTertiaryControllerAddressType.setStatus('current')
cLApTertiaryControllerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 15), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApTertiaryControllerAddress.setStatus('current')
cLApLastRebootReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("none", 0), ("dot11gModeChange", 1), ("ipAddressSet", 2), ("ipAddressReset", 3), ("rebootFromController", 4), ("dhcpFallbackFail", 5), ("discoveryFail", 6), ("noJoinResponse", 7), ("denyJoin", 8), ("noConfigResponse", 9), ("configController", 10), ("imageUpgradeSuccess", 11), ("imageOpcodeInvalid", 12), ("imageCheckSumInvalid", 13), ("imageDataTimeout", 14), ("configFileInvalid", 15), ("imageDownloadError", 16), ("rebootFromConsole", 17), ("rapOverAir", 18), ("powerLow", 19), ("crash", 20), ("powerHigh", 21), ("powerLoss", 22), ("powerChange", 23), ("componentFailure", 24), ("watchdog", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApLastRebootReason.setStatus('current')
cLApEncryptionEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 18), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApEncryptionEnable.setStatus('current')
cLApFailoverPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3), ("critical", 4))).clone('low')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApFailoverPriority.setStatus('current')
cLApPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("low", 1), ("fifteendotfour", 2), ("sixteendoteight", 3), ("full", 4), ("external", 5), ("mixedmode", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApPowerStatus.setStatus('current')
cLApTelnetEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 21), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApTelnetEnable.setStatus('current')
cLApSshEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 22), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApSshEnable.setStatus('current')
cLApPreStdStateEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApPreStdStateEnabled.setStatus('current')
cLApPwrInjectorStateEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 24), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApPwrInjectorStateEnabled.setStatus('current')
cLApPwrInjectorSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("installed", 2), ("override", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApPwrInjectorSelection.setStatus('current')
cLApPwrInjectorSwMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 26), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApPwrInjectorSwMacAddr.setStatus('current')
cLApWipsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 27), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApWipsEnable.setStatus('current')
cLApMonitorModeOptimization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("all", 1), ("tracking", 2), ("wips", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApMonitorModeOptimization.setStatus('current')
cLApDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 29), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApDomainName.setStatus('current')
cLApNameServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 30), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApNameServerAddressType.setStatus('current')
cLApNameServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 31), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApNameServerAddress.setStatus('current')
cLApAMSDUEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 32), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApAMSDUEnable.setStatus('current')
cLApEncryptionSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 33), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApEncryptionSupported.setStatus('current')
cLApRogueDetectionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 34), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApRogueDetectionEnabled.setStatus('current')
cLApTcpMss = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(536, 1363), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApTcpMss.setStatus('current')
cLApDataEncryptionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 36), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApDataEncryptionStatus.setStatus('current')
cLApNsiKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApNsiKey.setStatus('current')
cLApAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 38), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApAdminStatus.setStatus('current')
cLApPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 39), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApPortNumber.setStatus('current')
cLApRetransmitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 40), Unsigned32()).setUnits('retries').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApRetransmitCount.setStatus('current')
cLApRetransmitTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 41), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApRetransmitTimeout.setStatus('current')
cLApDot11IfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 1), )
if mibBuilder.loadTexts: cLApDot11IfTable.setStatus('current')
cLApDot11IfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), (0, "CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"))
if mibBuilder.loadTexts: cLApDot11IfEntry.setStatus('current')
cLApDot11IfSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cLApDot11IfSlotId.setStatus('current')
cLApDot11IfType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 1, 1, 2), CLApIfType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApDot11IfType.setStatus('current')
cLApDot11IfRegDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApDot11IfRegDomain.setStatus('current')
cLApDot11nSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApDot11nSupport.setStatus('current')
cLAp11nChannelBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("five", 1), ("ten", 2), ("twenty", 3), ("forty", 4)))).setUnits('mhz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLAp11nChannelBandwidth.setStatus('current')
cLApLomEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApLomEnabled.setStatus('deprecated')
cLApLomFirstChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 1, 1, 7), CLDot11Channel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApLomFirstChannel.setStatus('current')
cLApLomSecondChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 1, 1, 8), CLDot11Channel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApLomSecondChannel.setStatus('current')
cLApLomThirdChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 1, 1, 9), CLDot11Channel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApLomThirdChannel.setStatus('current')
cLApLomFourthChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 1, 1, 10), CLDot11Channel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApLomFourthChannel.setStatus('current')
cLApExtensionChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 1, 1, 11), CLDot11Channel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApExtensionChannel.setStatus('current')
cLApLegacyBeamForming = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notApplicable", 3))).clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApLegacyBeamForming.setStatus('current')
cLApCdpOverAirEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 1, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApCdpOverAirEnabled.setStatus('current')
cLApDot11IfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 1, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApDot11IfAdminStatus.setStatus('current')
cLApEthernetIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2), )
if mibBuilder.loadTexts: cLApEthernetIfTable.setStatus('current')
cLApEthernetIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), (0, "CISCO-LWAPP-AP-MIB", "cLApEthernetIfSlotId"))
if mibBuilder.loadTexts: cLApEthernetIfEntry.setStatus('current')
cLApEthernetIfSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cLApEthernetIfSlotId.setStatus('current')
cLApEthernetIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfName.setStatus('current')
cLApEthernetIfMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfMacAddress.setStatus('current')
cLApEthernetIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApEthernetIfAdminStatus.setStatus('current')
cLApEthernetIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfOperStatus.setStatus('current')
cLApEthernetIfRxUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfRxUcastPkts.setStatus('current')
cLApEthernetIfRxNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfRxNUcastPkts.setStatus('current')
cLApEthernetIfTxUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfTxUcastPkts.setStatus('current')
cLApEthernetIfTxNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfTxNUcastPkts.setStatus('current')
cLApEthernetIfDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("halfduplex", 2), ("fullduplex", 3), ("auto", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfDuplex.setStatus('current')
cLApEthernetIfLinkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfLinkSpeed.setStatus('current')
cLApEthernetIfPOEPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("drawn", 2), ("notdrawn", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfPOEPower.setStatus('current')
cLApEthernetIfRxTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 13), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfRxTotalBytes.setStatus('current')
cLApEthernetIfTxTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 14), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfTxTotalBytes.setStatus('current')
cLApEthernetIfInputCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 15), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfInputCrc.setStatus('current')
cLApEthernetIfInputAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 16), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfInputAborts.setStatus('current')
cLApEthernetIfInputErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 17), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfInputErrors.setStatus('current')
cLApEthernetIfInputFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 18), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfInputFrames.setStatus('current')
cLApEthernetIfInputOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 19), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfInputOverrun.setStatus('current')
cLApEthernetIfInputDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 20), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfInputDrops.setStatus('current')
cLApEthernetIfInputResource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 21), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfInputResource.setStatus('current')
cLApEthernetIfUnknownProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 22), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfUnknownProtocol.setStatus('current')
cLApEthernetIfRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 23), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfRunts.setStatus('current')
cLApEthernetIfGiants = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 24), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfGiants.setStatus('current')
cLApEthernetIfThrottle = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfThrottle.setStatus('current')
cLApEthernetIfResets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfResets.setStatus('current')
cLApEthernetIfOutputCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 27), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfOutputCollision.setStatus('current')
cLApEthernetIfOutputNoBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 28), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfOutputNoBuffer.setStatus('current')
cLApEthernetIfOutputResource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 29), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfOutputResource.setStatus('current')
cLApEthernetIfOutputUnderrun = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 30), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfOutputUnderrun.setStatus('current')
cLApEthernetIfOutputErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 31), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfOutputErrors.setStatus('current')
cLApEthernetIfOutputTotalDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 32), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfOutputTotalDrops.setStatus('current')
cLApEthernetIfCdpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 33), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApEthernetIfCdpEnabled.setStatus('current')
cLApDot11RadioTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 3), )
if mibBuilder.loadTexts: cLApDot11RadioTable.setStatus('current')
cLApDot11RadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), (0, "CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"))
if mibBuilder.loadTexts: cLApDot11RadioEntry.setStatus('current')
cLApDot11RadioMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 3, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApDot11RadioMACAddress.setStatus('current')
cLApDot11RadioSubBand = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 3, 1, 2), CLApDot11RadioSubband()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApDot11RadioSubBand.setStatus('current')
cLApDot11RadioVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApDot11RadioVersion.setStatus('current')
cLApDot11IsBackhaul = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApDot11IsBackhaul.setStatus('current')
cLApDot11RadioRole = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 3, 1, 5), CLApDot11RadioRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApDot11RadioRole.setStatus('current')
cLApCredentialGlobalUserName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 4, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApCredentialGlobalUserName.setStatus('current')
cLApCredentialGlobalPassword = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 4, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApCredentialGlobalPassword.setStatus('current')
cLApCredentialGlobalSecret = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 4, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApCredentialGlobalSecret.setStatus('current')
cLApCredentialsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 4, 4), )
if mibBuilder.loadTexts: cLApCredentialsTable.setStatus('current')
cLApCredentialsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 4, 4, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"))
if mibBuilder.loadTexts: cLApCredentialsEntry.setStatus('current')
cLApCredentialUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 4, 4, 1, 1), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLApCredentialUserName.setStatus('current')
cLApCredentialPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 4, 4, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLApCredentialPassword.setStatus('current')
cLApCredentialSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 4, 4, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLApCredentialSecret.setStatus('current')
cLApCredentialEnableGlobalCredentials = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 4, 4, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLApCredentialEnableGlobalCredentials.setStatus('current')
cLApLinkLatencyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 5, 1), )
if mibBuilder.loadTexts: cLApLinkLatencyTable.setStatus('current')
cLApLinkLatencyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"))
if mibBuilder.loadTexts: cLApLinkLatencyEntry.setStatus('current')
cLApLinkLatencyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 5, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApLinkLatencyEnable.setStatus('current')
cLApLinkLatencyReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 5, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApLinkLatencyReset.setStatus('current')
cLApLinkLatencyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 5, 2), )
if mibBuilder.loadTexts: cLApLinkLatencyStatsTable.setStatus('current')
cLApLinkLatencyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 5, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"))
if mibBuilder.loadTexts: cLApLinkLatencyStatsEntry.setStatus('current')
cLApLinkLatencyStatsCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 5, 2, 1, 1), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApLinkLatencyStatsCurrent.setStatus('current')
cLApLinkLatencyStatsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 5, 2, 1, 2), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApLinkLatencyStatsMin.setStatus('current')
cLApLinkLatencyStatsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 5, 2, 1, 3), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApLinkLatencyStatsMax.setStatus('current')
cLApLinkLatencyTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 5, 2, 1, 4), TimeStamp()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApLinkLatencyTimeStamp.setStatus('current')
cLApDataLinkLatencyStatsCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 5, 2, 1, 5), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApDataLinkLatencyStatsCurrent.setStatus('current')
cLApDataLinkLatencyStatsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 5, 2, 1, 6), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApDataLinkLatencyStatsMin.setStatus('current')
cLApDataLinkLatencyStatsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 5, 2, 1, 7), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApDataLinkLatencyStatsMax.setStatus('current')
cLApDataLinkLatencyTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 5, 2, 1, 8), TimeStamp()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApDataLinkLatencyTimeStamp.setStatus('current')
cLApIfSmtParamTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 2), )
if mibBuilder.loadTexts: cLApIfSmtParamTable.setStatus('current')
cLApIfSmtParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), (0, "CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"))
if mibBuilder.loadTexts: cLApIfSmtParamEntry.setStatus('current')
cLApIfSmtDot11Bssid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApIfSmtDot11Bssid.setStatus('current')
cLApCountryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 3), )
if mibBuilder.loadTexts: cLApCountryTable.setStatus('current')
cLApCountryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"))
if mibBuilder.loadTexts: cLApCountryEntry.setStatus('current')
cLApCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApCountryCode.setStatus('current')
cLApCountryAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApCountryAllowed.setStatus('current')
ciscoLwappApIfRegulatoryDomainMismatchNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoLwappApIfRegulatoryDomainMismatchNotifEnabled.setStatus('current')
ciscoLwappApCrashEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoLwappApCrashEnabled.setStatus('current')
ciscoLwappApUnsupportedEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoLwappApUnsupportedEnabled.setStatus('current')
ciscoLwappApAssociatedEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoLwappApAssociatedEnabled.setStatus('current')
cLApSeClientTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 8), )
if mibBuilder.loadTexts: cLApSeClientTable.setStatus('current')
cLApSeClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 8, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), (0, "CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), (0, "CISCO-LWAPP-AP-MIB", "cLApSeIndex"))
if mibBuilder.loadTexts: cLApSeClientEntry.setStatus('current')
cLApSeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: cLApSeIndex.setStatus('current')
cLApSeClientUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 8, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApSeClientUserName.setStatus('current')
cLApSeClientIPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 8, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApSeClientIPAddrType.setStatus('current')
cLApSeClientIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 8, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApSeClientIPAddr.setStatus('current')
cLApSeClientDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 8, 1, 5), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApSeClientDuration.setStatus('current')
cLApSeClientPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 8, 1, 6), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApSeClientPort.setStatus('current')
cLApFastHbTimerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 1), )
if mibBuilder.loadTexts: cLApFastHbTimerTable.setStatus('current')
cLApFastHbTimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApFastHbTimerApType"))
if mibBuilder.loadTexts: cLApFastHbTimerEntry.setStatus('current')
cLApFastHbTimerApType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("hreap", 2))))
if mibBuilder.loadTexts: cLApFastHbTimerApType.setStatus('current')
cLApFastHbTimerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApFastHbTimerTimeout.setStatus('current')
cLApFastHbTimerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApFastHbTimerEnabled.setStatus('current')
cLApPrimaryDiscoveryTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30, 3600)).clone(120)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApPrimaryDiscoveryTimeout.setStatus('current')
cLApGlobalPrimaryControllerAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 4), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApGlobalPrimaryControllerAddressType.setStatus('current')
cLApGlobalPrimaryControllerAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 5), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApGlobalPrimaryControllerAddress.setStatus('current')
cLApGlobalPrimaryControllerName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApGlobalPrimaryControllerName.setStatus('current')
cLApGlobalSecondaryControllerAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 7), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApGlobalSecondaryControllerAddressType.setStatus('current')
cLApGlobalSecondaryControllerAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 8), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApGlobalSecondaryControllerAddress.setStatus('current')
cLApGlobalSecondaryControllerName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApGlobalSecondaryControllerName.setStatus('current')
cLApGlobalFailoverPriority = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApGlobalFailoverPriority.setStatus('current')
cLApGlobalTcpMss = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(536, 1363), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApGlobalTcpMss.setStatus('current')
cLApGlobalDot11IfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 12), )
if mibBuilder.loadTexts: cLApGlobalDot11IfTable.setStatus('current')
cLApGlobalDot11IfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 12, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"))
if mibBuilder.loadTexts: cLApGlobalDot11IfEntry.setStatus('current')
cLApGlobalDot11IfCdpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 12, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApGlobalDot11IfCdpEnabled.setStatus('current')
cLApGlobalEthernetIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 13), )
if mibBuilder.loadTexts: cLApGlobalEthernetIfTable.setStatus('current')
cLApGlobalEthernetIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 13, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApEthernetIfSlotId"))
if mibBuilder.loadTexts: cLApGlobalEthernetIfEntry.setStatus('current')
cLApGlobalEthernetIfCdpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 13, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApGlobalEthernetIfCdpEnabled.setStatus('current')
cLApGlobalRetransmitCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 14), Unsigned32()).setUnits('retries').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApGlobalRetransmitCount.setStatus('current')
cLApGlobalRetransmitTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 15), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApGlobalRetransmitTimeout.setStatus('current')
cLApDot11IfAntennaTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 4), )
if mibBuilder.loadTexts: cLApDot11IfAntennaTable.setStatus('current')
cLApDot11IfAntennaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 4, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), (0, "CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), (0, "CISCO-LWAPP-AP-MIB", "cLApDot11IfAntennaId"))
if mibBuilder.loadTexts: cLApDot11IfAntennaEntry.setStatus('current')
cLApDot11IfAntennaId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: cLApDot11IfAntennaId.setStatus('current')
cLApDot11IfAntennaTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 4, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApDot11IfAntennaTxEnable.setStatus('current')
cLApDot11IfAntennaRxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 4, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApDot11IfAntennaRxEnable.setStatus('current')
cLApDot11IfAntennaEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 4, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApDot11IfAntennaEnable.setStatus('current')
cLApVlanIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 5), )
if mibBuilder.loadTexts: cLApVlanIfTable.setStatus('current')
cLApVlanIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 5, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), (0, "CISCO-LWAPP-AP-MIB", "cLApVlanIfEthernetId"))
if mibBuilder.loadTexts: cLApVlanIfEntry.setStatus('current')
cLApVlanIfEthernetId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: cLApVlanIfEthernetId.setStatus('current')
cLApVlanIfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("access", 2), ("trunk", 3))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApVlanIfMode.setStatus('current')
cLApVlanIfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 5, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApVlanIfEnable.setStatus('current')
cLApVlanIfNativeVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 5, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApVlanIfNativeVlanId.setStatus('current')
cLApVlanListTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 6), )
if mibBuilder.loadTexts: cLApVlanListTable.setStatus('current')
cLApVlanListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 6, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), (0, "CISCO-LWAPP-AP-MIB", "cLApVlanIfEthernetId"), (0, "CISCO-LWAPP-AP-MIB", "cLApVlanListVlanId"))
if mibBuilder.loadTexts: cLApVlanListEntry.setStatus('current')
cLApVlanListVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cLApVlanListVlanId.setStatus('current')
cLApVlanListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLApVlanListRowStatus.setStatus('current')
cLApGlobal802dot1xAuthenticationEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 7, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApGlobal802dot1xAuthenticationEnabled.setStatus('current')
cLApGlobal802dot1xSupplicantUsername = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 7, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApGlobal802dot1xSupplicantUsername.setStatus('current')
cLApGlobal802dot1xSupplicantPassword = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 7, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApGlobal802dot1xSupplicantPassword.setStatus('current')
cLAp802dot1xSupplicantTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 7, 4), )
if mibBuilder.loadTexts: cLAp802dot1xSupplicantTable.setStatus('current')
cLAp802dot1xSupplicantEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 7, 4, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"))
if mibBuilder.loadTexts: cLAp802dot1xSupplicantEntry.setStatus('current')
cLAp802dot1xSupplicantOverrideEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 7, 4, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLAp802dot1xSupplicantOverrideEnabled.setStatus('current')
cLAp802dot1xSupplicantOverrideUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 7, 4, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLAp802dot1xSupplicantOverrideUsername.setStatus('current')
cLAp802dot1xSupplicantOverridePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 7, 4, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLAp802dot1xSupplicantOverridePassword.setStatus('current')
cLApDot11GlobalConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 7), )
if mibBuilder.loadTexts: cLApDot11GlobalConfigTable.setStatus('current')
cLApDot11GlobalConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 7, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApDot11IfType"))
if mibBuilder.loadTexts: cLApDot11GlobalConfigEntry.setStatus('current')
cLApNwLegacyBeamForming = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notApplicable", 3))).clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApNwLegacyBeamForming.setStatus('current')
cLApNwTxPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-80, -50)).clone(-70)).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApNwTxPowerThreshold.setStatus('current')
cLApAssocFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 3, 1), CLApAssocFailureReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLApAssocFailureReason.setStatus('current')
cLApRogueApMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 3, 2), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLApRogueApMacAddress.setStatus('current')
cLApDot11RadioChannelNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 3, 3), CLDot11Channel()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLApDot11RadioChannelNumber.setStatus('current')
cLApRogueApSsid = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 3, 4), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLApRogueApSsid.setStatus('current')
cLApRogueType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("asleap", 1), ("honeypot", 2), ("other", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLApRogueType.setStatus('current')
cLApWipsReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("noMonitoringDevice", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLApWipsReason.setStatus('current')
cLApWipsClear = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 3, 7), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLApWipsClear.setStatus('current')
cLApIfUpDownFailureType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("detectedFailure", 1), ("configuredReset", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLApIfUpDownFailureType.setStatus('current')
cLApIfUpDownCause = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 3, 9), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLApIfUpDownCause.setStatus('current')
cLApIfUpDownFailureCode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 3, 10), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLApIfUpDownFailureCode.setStatus('current')
ciscoLwappApIfRegulatoryDomainMismatchNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 0, 1)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApName"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfType"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfRegDomain"), ("CISCO-LWAPP-DOT11-MIB", "cldRegulatoryDomain"))
if mibBuilder.loadTexts: ciscoLwappApIfRegulatoryDomainMismatchNotif.setStatus('current')
ciscoLwappApCrash = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 0, 2)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApName"))
if mibBuilder.loadTexts: ciscoLwappApCrash.setStatus('obsolete')
ciscoLwappApUnsupported = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 0, 3)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApName"), ("CISCO-LWAPP-AP-MIB", "cLApAssocFailureReason"))
if mibBuilder.loadTexts: ciscoLwappApUnsupported.setStatus('current')
ciscoLwappApAssociated = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 0, 4)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApName"), ("CISCO-LWAPP-AP-MIB", "cLApLastRebootReason"), ("CISCO-LWAPP-AP-MIB", "cLApDataEncryptionStatus"))
if mibBuilder.loadTexts: ciscoLwappApAssociated.setStatus('current')
ciscoLwappApPower = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 0, 5)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApName"), ("CISCO-LWAPP-AP-MIB", "cLApPowerStatus"))
if mibBuilder.loadTexts: ciscoLwappApPower.setStatus('current')
ciscoLwappApRogueApDetected = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 0, 6)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), ("CISCO-LWAPP-AP-MIB", "cLApName"), ("CISCO-LWAPP-AP-MIB", "cLApRogueApMacAddress"), ("CISCO-LWAPP-AP-MIB", "cLApEthernetIfSlotId"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfType"), ("CISCO-LWAPP-AP-MIB", "cLApDot11RadioChannelNumber"), ("CISCO-LWAPP-AP-MIB", "cLApRogueApSsid"), ("CISCO-LWAPP-AP-MIB", "cLApRogueType"))
if mibBuilder.loadTexts: ciscoLwappApRogueApDetected.setStatus('current')
ciscoLwappApRogueApCleared = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 0, 7)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), ("CISCO-LWAPP-AP-MIB", "cLApName"), ("CISCO-LWAPP-AP-MIB", "cLApRogueApMacAddress"), ("CISCO-LWAPP-AP-MIB", "cLApEthernetIfSlotId"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfType"), ("CISCO-LWAPP-AP-MIB", "cLApDot11RadioChannelNumber"), ("CISCO-LWAPP-AP-MIB", "cLApRogueApSsid"), ("CISCO-LWAPP-AP-MIB", "cLApRogueType"))
if mibBuilder.loadTexts: ciscoLwappApRogueApCleared.setStatus('current')
ciscoLwappApWipsNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 0, 8)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApName"), ("CISCO-LWAPP-AP-MIB", "cLApWipsReason"), ("CISCO-LWAPP-AP-MIB", "cLApWipsClear"))
if mibBuilder.loadTexts: ciscoLwappApWipsNotification.setStatus('current')
ciscoLwappApNoDownlinkChannelNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 0, 9)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApName"))
if mibBuilder.loadTexts: ciscoLwappApNoDownlinkChannelNotify.setStatus('current')
ciscoLwappApIfUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 0, 10)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), ("CISCO-LWAPP-AP-MIB", "cLApPortNumber"), ("CISCO-LWAPP-AP-MIB", "cLApIfUpDownFailureType"), ("CISCO-LWAPP-AP-MIB", "cLApIfUpDownCause"), ("CISCO-LWAPP-AP-MIB", "cLApIfUpDownFailureCode"), ("CISCO-LWAPP-AP-MIB", "cLApName"))
if mibBuilder.loadTexts: ciscoLwappApIfUpNotify.setStatus('current')
ciscoLwappApIfDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 0, 11)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), ("CISCO-LWAPP-AP-MIB", "cLApAdminStatus"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfAdminStatus"), ("CISCO-LWAPP-AP-MIB", "cLApIfUpDownFailureType"), ("CISCO-LWAPP-AP-MIB", "cLApIfUpDownCause"), ("CISCO-LWAPP-AP-MIB", "cLApIfUpDownFailureCode"), ("CISCO-LWAPP-AP-MIB", "cLApName"))
if mibBuilder.loadTexts: ciscoLwappApIfDownNotify.setStatus('current')
ciscoLwappApMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 1))
ciscoLwappApMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2))
ciscoLwappApMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 1, 1)).setObjects(("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApIfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApMIBCompliance = ciscoLwappApMIBCompliance.setStatus('deprecated')
ciscoLwappApMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 1, 2)).setObjects(("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApIfGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApMIBComplianceRev1 = ciscoLwappApMIBComplianceRev1.setStatus('deprecated')
ciscoLwappApMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 1, 3)).setObjects(("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApIfGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup1"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApMIBComplianceRev2 = ciscoLwappApMIBComplianceRev2.setStatus('deprecated')
ciscoLwappApMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 1, 4)).setObjects(("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApIfGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup1"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup2"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup3"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup4"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApNotifObjsGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApNotifsGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup4"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApEthernetIfGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApRadioGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApMIBComplianceRev3 = ciscoLwappApMIBComplianceRev3.setStatus('deprecated')
ciscoLwappApMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 1, 5)).setObjects(("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApIfGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup1"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup2"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup3"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApNotifObjsGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApNotifsGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup4"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApEthernetIfGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApRadioGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup5"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApMIBComplianceRev4 = ciscoLwappApMIBComplianceRev4.setStatus('deprecated')
ciscoLwappApMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 1, 6)).setObjects(("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApIfGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup1"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup2"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup3"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApNotifObjsGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApNotifsGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup4"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApEthernetIfGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApRadioGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup5"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappSeClientSup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApMIBComplianceRev5 = ciscoLwappApMIBComplianceRev5.setStatus('deprecated')
ciscoLwappApMIBComplianceRev6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 1, 7)).setObjects(("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApIfGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup1"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup2"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup3"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApNotifObjsGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApNotifsGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup4"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApEthernetIfGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApRadioGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup5"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappSeClientSup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApMIBComplianceRev6 = ciscoLwappApMIBComplianceRev6.setStatus('deprecated')
ciscoLwappApMIBComplianceRev7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 1, 8)).setObjects(("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApIfGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup1"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup2"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup3"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApNotifObjsGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApNotifsGroupVer1"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup6"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup7"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApEthernetIfGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApRadioGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup5"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappSeClientSup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappDot11IfAntennaGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappRetransmitGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApMIBComplianceRev7 = ciscoLwappApMIBComplianceRev7.setStatus('current')
ciscoLwappApGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 1)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApIfMacAddress"), ("CISCO-LWAPP-AP-MIB", "cLApMaxNumberOfDot11Slots"), ("CISCO-LWAPP-AP-MIB", "cLApIfSmtDot11Bssid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApGroup = ciscoLwappApGroup.setStatus('current')
ciscoLwappApIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 2)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApDot11IfType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApIfGroup = ciscoLwappApIfGroup.setStatus('current')
ciscoLwappApGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 3)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApEntPhysicalIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApGroupSup1 = ciscoLwappApGroupSup1.setStatus('current')
ciscoLwappApGroupSup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 4)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApGroupSup2 = ciscoLwappApGroupSup2.setStatus('current')
ciscoLwappApGroupSup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 5)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApDot11IfRegDomain"), ("CISCO-LWAPP-AP-MIB", "cLApDot11nSupport"), ("CISCO-LWAPP-AP-MIB", "cLAp11nChannelBandwidth"), ("CISCO-LWAPP-AP-MIB", "cLApCountryCode"), ("CISCO-LWAPP-AP-MIB", "cLApCountryAllowed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApGroupSup3 = ciscoLwappApGroupSup3.setStatus('current')
ciscoLwappApNotifObjsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 6)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApAssocFailureReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApNotifObjsGroup = ciscoLwappApNotifObjsGroup.setStatus('current')
ciscoLwappApNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 7)).setObjects(("CISCO-LWAPP-AP-MIB", "ciscoLwappApIfRegulatoryDomainMismatchNotif"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApCrash"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApUnsupported"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApAssociated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApNotifsGroup = ciscoLwappApNotifsGroup.setStatus('deprecated')
ciscoLwappApGroupSup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 8)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApUpTime"), ("CISCO-LWAPP-AP-MIB", "cLLwappUpTime"), ("CISCO-LWAPP-AP-MIB", "cLLwappJoinTakenTime"), ("CISCO-LWAPP-AP-MIB", "cLApMaxNumberOfEthernetSlots"), ("CISCO-LWAPP-AP-MIB", "cLApPrimaryControllerAddressType"), ("CISCO-LWAPP-AP-MIB", "cLApPrimaryControllerAddress"), ("CISCO-LWAPP-AP-MIB", "cLApSecondaryControllerAddressType"), ("CISCO-LWAPP-AP-MIB", "cLApSecondaryControllerAddress"), ("CISCO-LWAPP-AP-MIB", "cLApTertiaryControllerAddressType"), ("CISCO-LWAPP-AP-MIB", "cLApTertiaryControllerAddress"), ("CISCO-LWAPP-AP-MIB", "cLApLomEnabled"), ("CISCO-LWAPP-AP-MIB", "cLApLomFirstChannel"), ("CISCO-LWAPP-AP-MIB", "cLApLomSecondChannel"), ("CISCO-LWAPP-AP-MIB", "cLApLomThirdChannel"), ("CISCO-LWAPP-AP-MIB", "cLApLomFourthChannel"), ("CISCO-LWAPP-AP-MIB", "cLApCredentialGlobalUserName"), ("CISCO-LWAPP-AP-MIB", "cLApCredentialGlobalPassword"), ("CISCO-LWAPP-AP-MIB", "cLApCredentialGlobalSecret"), ("CISCO-LWAPP-AP-MIB", "cLApCredentialUserName"), ("CISCO-LWAPP-AP-MIB", "cLApCredentialPassword"), ("CISCO-LWAPP-AP-MIB", "cLApCredentialSecret"), ("CISCO-LWAPP-AP-MIB", "cLApCredentialEnableGlobalCredentials"), ("CISCO-LWAPP-AP-MIB", "cLApFastHbTimerTimeout"), ("CISCO-LWAPP-AP-MIB", "cLApFastHbTimerEnabled"), ("CISCO-LWAPP-AP-MIB", "cLApPrimaryDiscoveryTimeout"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalPrimaryControllerAddressType"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalPrimaryControllerAddress"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalPrimaryControllerName"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalSecondaryControllerAddressType"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalSecondaryControllerAddress"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalSecondaryControllerName"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApIfRegulatoryDomainMismatchNotifEnabled"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApCrashEnabled"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApUnsupportedEnabled"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApAssociatedEnabled"), ("CISCO-LWAPP-AP-MIB", "cLApLastRebootReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApGroupSup4 = ciscoLwappApGroupSup4.setStatus('deprecated')
ciscoLwappApEthernetIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 9)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApEthernetIfName"), ("CISCO-LWAPP-AP-MIB", "cLApEthernetIfMacAddress"), ("CISCO-LWAPP-AP-MIB", "cLApEthernetIfAdminStatus"), ("CISCO-LWAPP-AP-MIB", "cLApEthernetIfOperStatus"), ("CISCO-LWAPP-AP-MIB", "cLApEthernetIfRxUcastPkts"), ("CISCO-LWAPP-AP-MIB", "cLApEthernetIfRxNUcastPkts"), ("CISCO-LWAPP-AP-MIB", "cLApEthernetIfTxUcastPkts"), ("CISCO-LWAPP-AP-MIB", "cLApEthernetIfTxNUcastPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApEthernetIfGroup = ciscoLwappApEthernetIfGroup.setStatus('current')
ciscoLwappApRadioGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 10)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApDot11RadioMACAddress"), ("CISCO-LWAPP-AP-MIB", "cLApDot11RadioSubBand"), ("CISCO-LWAPP-AP-MIB", "cLApDot11RadioVersion"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IsBackhaul"), ("CISCO-LWAPP-AP-MIB", "cLApDot11RadioRole"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApRadioGroup = ciscoLwappApRadioGroup.setStatus('current')
ciscoLwappApGroupSup5 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 11)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApGlobalFailoverPriority"), ("CISCO-LWAPP-AP-MIB", "cLApFailoverPriority"), ("CISCO-LWAPP-AP-MIB", "cLApEncryptionEnable"), ("CISCO-LWAPP-AP-MIB", "cLApLinkLatencyEnable"), ("CISCO-LWAPP-AP-MIB", "cLApLinkLatencyReset"), ("CISCO-LWAPP-AP-MIB", "cLApLinkLatencyStatsCurrent"), ("CISCO-LWAPP-AP-MIB", "cLApLinkLatencyStatsMin"), ("CISCO-LWAPP-AP-MIB", "cLApLinkLatencyStatsMax"), ("CISCO-LWAPP-AP-MIB", "cLApLinkLatencyTimeStamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApGroupSup5 = ciscoLwappApGroupSup5.setStatus('current')
ciscoLwappSeClientSup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 12)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApSeClientUserName"), ("CISCO-LWAPP-AP-MIB", "cLApSeClientIPAddrType"), ("CISCO-LWAPP-AP-MIB", "cLApSeClientIPAddr"), ("CISCO-LWAPP-AP-MIB", "cLApSeClientDuration"), ("CISCO-LWAPP-AP-MIB", "cLApSeClientPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappSeClientSup = ciscoLwappSeClientSup.setStatus('current')
ciscoLwappDot11IfAntennaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 13)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApDot11IfAntennaEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11IfAntennaGroup = ciscoLwappDot11IfAntennaGroup.setStatus('current')
ciscoLwappRetransmitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 14)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApRetransmitCount"), ("CISCO-LWAPP-AP-MIB", "cLApRetransmitTimeout"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalRetransmitCount"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalRetransmitTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappRetransmitGroup = ciscoLwappRetransmitGroup.setStatus('current')
ciscoLwappApGroupSup6 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 15)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApUpTime"), ("CISCO-LWAPP-AP-MIB", "cLLwappUpTime"), ("CISCO-LWAPP-AP-MIB", "cLLwappJoinTakenTime"), ("CISCO-LWAPP-AP-MIB", "cLApMaxNumberOfEthernetSlots"), ("CISCO-LWAPP-AP-MIB", "cLApPrimaryControllerAddressType"), ("CISCO-LWAPP-AP-MIB", "cLApPrimaryControllerAddress"), ("CISCO-LWAPP-AP-MIB", "cLApSecondaryControllerAddressType"), ("CISCO-LWAPP-AP-MIB", "cLApSecondaryControllerAddress"), ("CISCO-LWAPP-AP-MIB", "cLApTertiaryControllerAddressType"), ("CISCO-LWAPP-AP-MIB", "cLApTertiaryControllerAddress"), ("CISCO-LWAPP-AP-MIB", "cLApLomFirstChannel"), ("CISCO-LWAPP-AP-MIB", "cLApLomSecondChannel"), ("CISCO-LWAPP-AP-MIB", "cLApLomThirdChannel"), ("CISCO-LWAPP-AP-MIB", "cLApLomFourthChannel"), ("CISCO-LWAPP-AP-MIB", "cLApCredentialGlobalUserName"), ("CISCO-LWAPP-AP-MIB", "cLApCredentialGlobalPassword"), ("CISCO-LWAPP-AP-MIB", "cLApCredentialGlobalSecret"), ("CISCO-LWAPP-AP-MIB", "cLApCredentialUserName"), ("CISCO-LWAPP-AP-MIB", "cLApCredentialPassword"), ("CISCO-LWAPP-AP-MIB", "cLApCredentialSecret"), ("CISCO-LWAPP-AP-MIB", "cLApCredentialEnableGlobalCredentials"), ("CISCO-LWAPP-AP-MIB", "cLApFastHbTimerTimeout"), ("CISCO-LWAPP-AP-MIB", "cLApFastHbTimerEnabled"), ("CISCO-LWAPP-AP-MIB", "cLApPrimaryDiscoveryTimeout"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalPrimaryControllerAddressType"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalPrimaryControllerAddress"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalPrimaryControllerName"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalSecondaryControllerAddressType"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalSecondaryControllerAddress"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalSecondaryControllerName"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApIfRegulatoryDomainMismatchNotifEnabled"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApCrashEnabled"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApUnsupportedEnabled"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApAssociatedEnabled"), ("CISCO-LWAPP-AP-MIB", "cLApLastRebootReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApGroupSup6 = ciscoLwappApGroupSup6.setStatus('current')
ciscoLwappApNotifsGroupVer1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 16)).setObjects(("CISCO-LWAPP-AP-MIB", "ciscoLwappApIfRegulatoryDomainMismatchNotif"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApUnsupported"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApAssociated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApNotifsGroupVer1 = ciscoLwappApNotifsGroupVer1.setStatus('current')
ciscoLwappApGroupSup7 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 17)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApTelnetEnable"), ("CISCO-LWAPP-AP-MIB", "cLApSshEnable"), ("CISCO-LWAPP-AP-MIB", "cLApPreStdStateEnabled"), ("CISCO-LWAPP-AP-MIB", "cLApPwrInjectorStateEnabled"), ("CISCO-LWAPP-AP-MIB", "cLApPwrInjectorSelection"), ("CISCO-LWAPP-AP-MIB", "cLApPwrInjectorSwMacAddr"), ("CISCO-LWAPP-AP-MIB", "cLApWipsEnable"), ("CISCO-LWAPP-AP-MIB", "cLApMonitorModeOptimization"), ("CISCO-LWAPP-AP-MIB", "cLApDomainName"), ("CISCO-LWAPP-AP-MIB", "cLApNameServerAddress"), ("CISCO-LWAPP-AP-MIB", "cLApAMSDUEnable"), ("CISCO-LWAPP-AP-MIB", "cLApEncryptionSupported"), ("CISCO-LWAPP-AP-MIB", "cLApRogueDetectionEnabled"), ("CISCO-LWAPP-AP-MIB", "cLApTcpMss"), ("CISCO-LWAPP-AP-MIB", "cLApAdminStatus"), ("CISCO-LWAPP-AP-MIB", "cLApLomEnabled"), ("CISCO-LWAPP-AP-MIB", "cLApLegacyBeamForming"), ("CISCO-LWAPP-AP-MIB", "cLApCdpOverAirEnabled"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfAdminStatus"), ("CISCO-LWAPP-AP-MIB", "cLApEthernetIfCdpEnabled"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalTcpMss"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalDot11IfCdpEnabled"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalEthernetIfCdpEnabled"), ("CISCO-LWAPP-AP-MIB", "cLApVlanIfMode"), ("CISCO-LWAPP-AP-MIB", "cLApVlanIfEnable"), ("CISCO-LWAPP-AP-MIB", "cLApVlanIfNativeVlanId"), ("CISCO-LWAPP-AP-MIB", "cLApGlobal802dot1xAuthenticationEnabled"), ("CISCO-LWAPP-AP-MIB", "cLApGlobal802dot1xSupplicantPassword"), ("CISCO-LWAPP-AP-MIB", "cLApGlobal802dot1xSupplicantUsername"), ("CISCO-LWAPP-AP-MIB", "cLAp802dot1xSupplicantOverrideEnabled"), ("CISCO-LWAPP-AP-MIB", "cLAp802dot1xSupplicantOverrideUsername"), ("CISCO-LWAPP-AP-MIB", "cLAp802dot1xSupplicantOverridePassword"), ("CISCO-LWAPP-AP-MIB", "cLApNwLegacyBeamForming"), ("CISCO-LWAPP-AP-MIB", "cLApNwTxPowerThreshold"), ("CISCO-LWAPP-AP-MIB", "cLApVlanListRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApGroupSup7 = ciscoLwappApGroupSup7.setStatus('current')
mibBuilder.exportSymbols("CISCO-LWAPP-AP-MIB", ciscoLwappApMIBComplianceRev4=ciscoLwappApMIBComplianceRev4, cLApVlanIfEntry=cLApVlanIfEntry, cLApSecondaryControllerAddress=cLApSecondaryControllerAddress, ciscoLwappApMIBNotifs=ciscoLwappApMIBNotifs, cLApEthernetIfTxTotalBytes=cLApEthernetIfTxTotalBytes, ciscoLwappApNotifsGroupVer1=ciscoLwappApNotifsGroupVer1, cLApMaxNumberOfDot11Slots=cLApMaxNumberOfDot11Slots, cLAp802dot1xSupplicantEntry=cLAp802dot1xSupplicantEntry, cLApExtensionChannel=cLApExtensionChannel, cLApGlobalSecondaryControllerName=cLApGlobalSecondaryControllerName, cLApDot11RadioVersion=cLApDot11RadioVersion, cLApEthernetIfPOEPower=cLApEthernetIfPOEPower, PYSNMP_MODULE_ID=ciscoLwappApMIB, cLApFastHbTimerApType=cLApFastHbTimerApType, cLApGlobalFailoverPriority=cLApGlobalFailoverPriority, cLApDot11RadioChannelNumber=cLApDot11RadioChannelNumber, ciscoLwappApIf=ciscoLwappApIf, ciscoLwappApMIBCompliance=ciscoLwappApMIBCompliance, cLApSeClientIPAddrType=cLApSeClientIPAddrType, cLApLinkLatencyEntry=cLApLinkLatencyEntry, cLApSeClientIPAddr=cLApSeClientIPAddr, ciscoLwappApMIBComplianceRev5=ciscoLwappApMIBComplianceRev5, cLApDot11IfAntennaId=cLApDot11IfAntennaId, ciscoLwappApMIBGroups=ciscoLwappApMIBGroups, ciscoLwappApRadioGroup=ciscoLwappApRadioGroup, cLApTable=cLApTable, cLApFastHbTimerEntry=cLApFastHbTimerEntry, cLApLinkLatencyEnable=cLApLinkLatencyEnable, cLApVlanListVlanId=cLApVlanListVlanId, ciscoLwappApGroupSup1=ciscoLwappApGroupSup1, cLApGlobal802dot1xSupplicantPassword=cLApGlobal802dot1xSupplicantPassword, cLApMonitorModeOptimization=cLApMonitorModeOptimization, cLApEncryptionSupported=cLApEncryptionSupported, cLApLinkLatencyStatsCurrent=cLApLinkLatencyStatsCurrent, cLApFastHbTimerEnabled=cLApFastHbTimerEnabled, cLApLinkLatencyStatsMin=cLApLinkLatencyStatsMin, cLApVlanListRowStatus=cLApVlanListRowStatus, ciscoLwappAp=ciscoLwappAp, cLApEthernetIfResets=cLApEthernetIfResets, cLApCredentialsTable=cLApCredentialsTable, cLApIfMacAddress=cLApIfMacAddress, cLApLomFourthChannel=cLApLomFourthChannel, cLApGlobalPrimaryControllerName=cLApGlobalPrimaryControllerName, cLApLegacyBeamForming=cLApLegacyBeamForming, ciscoLwappApRogueApCleared=ciscoLwappApRogueApCleared, ciscoLwappApNoDownlinkChannelNotify=ciscoLwappApNoDownlinkChannelNotify, cLApEthernetIfName=cLApEthernetIfName, cLAp11nChannelBandwidth=cLAp11nChannelBandwidth, cLApEthernetIfRunts=cLApEthernetIfRunts, cLApVlanIfEthernetId=cLApVlanIfEthernetId, cLApEthernetIfRxNUcastPkts=cLApEthernetIfRxNUcastPkts, ciscoLwappRetransmitGroup=ciscoLwappRetransmitGroup, ciscoLwappApMIBNotifObjects=ciscoLwappApMIBNotifObjects, cLApEthernetIfOutputNoBuffer=cLApEthernetIfOutputNoBuffer, cLApFastHbTimerTable=cLApFastHbTimerTable, cLApGlobalRetransmitCount=cLApGlobalRetransmitCount, cLApNwTxPowerThreshold=cLApNwTxPowerThreshold, cLApCdpOverAirEnabled=cLApCdpOverAirEnabled, cLApSeClientDuration=cLApSeClientDuration, cLApDot11IfAntennaRxEnable=cLApDot11IfAntennaRxEnable, cLApIfSmtParamTable=cLApIfSmtParamTable, cLApEthernetIfInputFrames=cLApEthernetIfInputFrames, cLApDot11RadioRole=cLApDot11RadioRole, cLApPreStdStateEnabled=cLApPreStdStateEnabled, cLApEthernetIfTxUcastPkts=cLApEthernetIfTxUcastPkts, cLApCredentialGlobalPassword=cLApCredentialGlobalPassword, ciscoLwappApGroupSup2=ciscoLwappApGroupSup2, cLApGlobalEthernetIfTable=cLApGlobalEthernetIfTable, cLApEncryptionEnable=cLApEncryptionEnable, ciscoLwappApIfRegulatoryDomainMismatchNotif=ciscoLwappApIfRegulatoryDomainMismatchNotif, cLApEthernetIfInputOverrun=cLApEthernetIfInputOverrun, cLApIfSmtDot11Bssid=cLApIfSmtDot11Bssid, ciscoLwappApMIBComplianceRev6=ciscoLwappApMIBComplianceRev6, cLApDot11RadioSubBand=cLApDot11RadioSubBand, cLApGlobalTcpMss=cLApGlobalTcpMss, cLApDomainName=cLApDomainName, cLApGlobal802dot1xAuthenticationEnabled=cLApGlobal802dot1xAuthenticationEnabled, cLApEthernetIfSlotId=cLApEthernetIfSlotId, cLApPrimaryControllerAddressType=cLApPrimaryControllerAddressType, cLApPwrInjectorSelection=cLApPwrInjectorSelection, cLApDot11IsBackhaul=cLApDot11IsBackhaul, cLApLinkLatencyTimeStamp=cLApLinkLatencyTimeStamp, cLApSeClientPort=cLApSeClientPort, cLApRetransmitTimeout=cLApRetransmitTimeout, cLApVlanListTable=cLApVlanListTable, cLApRetransmitCount=cLApRetransmitCount, cLApEthernetIfOperStatus=cLApEthernetIfOperStatus, cLApSeClientEntry=cLApSeClientEntry, cLApPowerStatus=cLApPowerStatus, cLApDot11nSupport=cLApDot11nSupport, ciscoLwappApMIBComplianceRev1=ciscoLwappApMIBComplianceRev1, cLApEthernetIfDuplex=cLApEthernetIfDuplex, cLApEthernetIfOutputErrors=cLApEthernetIfOutputErrors, cLApCountryEntry=cLApCountryEntry, cLApSeClientTable=cLApSeClientTable, cLApDot11IfAntennaTxEnable=cLApDot11IfAntennaTxEnable, ciscoLwappApMIB=ciscoLwappApMIB, cLApCredentialsEntry=cLApCredentialsEntry, cLApLinkLatencyStatsTable=cLApLinkLatencyStatsTable, cLApVlanIfTable=cLApVlanIfTable, cLApGlobalDot11IfEntry=cLApGlobalDot11IfEntry, cLApLomFirstChannel=cLApLomFirstChannel, cLApNameServerAddressType=cLApNameServerAddressType, cLApMaxNumberOfEthernetSlots=cLApMaxNumberOfEthernetSlots, ciscoLwappApIfDownNotify=ciscoLwappApIfDownNotify, cLApCredentialEnableGlobalCredentials=cLApCredentialEnableGlobalCredentials, cLApCredentialSecret=cLApCredentialSecret, cLLwappUpTime=cLLwappUpTime, cLApDataLinkLatencyStatsMin=cLApDataLinkLatencyStatsMin, cLApDot11IfAntennaEnable=cLApDot11IfAntennaEnable, cLApDot11IfTable=cLApDot11IfTable, cLApDot11RadioMACAddress=cLApDot11RadioMACAddress, ciscoLwappApUnsupportedEnabled=ciscoLwappApUnsupportedEnabled, ciscoLwappApGlobal=ciscoLwappApGlobal, cLApIfSmtParamEntry=cLApIfSmtParamEntry, cLApGlobalEthernetIfCdpEnabled=cLApGlobalEthernetIfCdpEnabled, cLApVlanIfMode=cLApVlanIfMode, cLApTertiaryControllerAddress=cLApTertiaryControllerAddress, cLApGlobal802dot1xSupplicantUsername=cLApGlobal802dot1xSupplicantUsername, ciscoLwappApAssociated=ciscoLwappApAssociated, ciscoLwappApPower=ciscoLwappApPower, ciscoLwappApEthernetIfGroup=ciscoLwappApEthernetIfGroup, cLApEthernetIfInputErrors=cLApEthernetIfInputErrors, ciscoLwappAp802dot1xSupplicant=ciscoLwappAp802dot1xSupplicant, cLApGlobalSecondaryControllerAddressType=cLApGlobalSecondaryControllerAddressType, ciscoLwappApMIBComplianceRev7=ciscoLwappApMIBComplianceRev7, ciscoLwappApIfGroup=ciscoLwappApIfGroup, cLAp802dot1xSupplicantOverrideEnabled=cLAp802dot1xSupplicantOverrideEnabled, ciscoLwappApCrash=ciscoLwappApCrash, cLApGlobalSecondaryControllerAddress=cLApGlobalSecondaryControllerAddress, ciscoLwappApCredentials=ciscoLwappApCredentials, cLApCredentialGlobalSecret=cLApCredentialGlobalSecret, ciscoLwappApGroupSup7=ciscoLwappApGroupSup7, cLApDot11RadioEntry=cLApDot11RadioEntry, cLApIfUpDownFailureCode=cLApIfUpDownFailureCode, cLApPrimaryDiscoveryTimeout=cLApPrimaryDiscoveryTimeout, cLApDot11RadioTable=cLApDot11RadioTable, cLApEthernetIfOutputUnderrun=cLApEthernetIfOutputUnderrun, cLApGlobalPrimaryControllerAddress=cLApGlobalPrimaryControllerAddress, cLApNwLegacyBeamForming=cLApNwLegacyBeamForming, ciscoLwappApGroupSup4=ciscoLwappApGroupSup4, cLApSshEnable=cLApSshEnable, cLApEthernetIfInputAborts=cLApEthernetIfInputAborts, cLApEthernetIfGiants=cLApEthernetIfGiants, cLApEthernetIfCdpEnabled=cLApEthernetIfCdpEnabled, ciscoLwappApIfRegulatoryDomainMismatchNotifEnabled=ciscoLwappApIfRegulatoryDomainMismatchNotifEnabled, ciscoLwappApRogueApDetected=ciscoLwappApRogueApDetected, cLApAssocFailureReason=cLApAssocFailureReason, cLApEthernetIfMacAddress=cLApEthernetIfMacAddress, ciscoLwappApGroup=ciscoLwappApGroup, cLApCredentialGlobalUserName=cLApCredentialGlobalUserName, cLApRogueApMacAddress=cLApRogueApMacAddress, cLApPrimaryControllerAddress=cLApPrimaryControllerAddress, cLApDot11IfAdminStatus=cLApDot11IfAdminStatus, cLApVlanIfEnable=cLApVlanIfEnable, cLApVlanIfNativeVlanId=cLApVlanIfNativeVlanId, ciscoLwappApMIBCompliances=ciscoLwappApMIBCompliances, cLApCountryAllowed=cLApCountryAllowed, cLApEthernetIfRxTotalBytes=cLApEthernetIfRxTotalBytes, cLApPwrInjectorSwMacAddr=cLApPwrInjectorSwMacAddr, cLApEthernetIfThrottle=cLApEthernetIfThrottle, ciscoLwappApMIBComplianceRev3=ciscoLwappApMIBComplianceRev3, ciscoLwappSpectrum=ciscoLwappSpectrum, cLApDataLinkLatencyTimeStamp=cLApDataLinkLatencyTimeStamp, cLApEthernetIfRxUcastPkts=cLApEthernetIfRxUcastPkts, cLApLastRebootReason=cLApLastRebootReason, cLApFailoverPriority=cLApFailoverPriority, cLApCredentialPassword=cLApCredentialPassword, ciscoLwappApNotifsGroup=ciscoLwappApNotifsGroup, cLApTcpMss=cLApTcpMss, ciscoLwappApMIBConform=ciscoLwappApMIBConform, cLApLomThirdChannel=cLApLomThirdChannel, ciscoLwappApAssociatedEnabled=ciscoLwappApAssociatedEnabled, ciscoLwappSeClientSup=ciscoLwappSeClientSup, cLApEthernetIfInputResource=cLApEthernetIfInputResource, cLApEthernetIfOutputCollision=cLApEthernetIfOutputCollision, cLApGlobalRetransmitTimeout=cLApGlobalRetransmitTimeout, cLApEntry=cLApEntry, cLApTelnetEnable=cLApTelnetEnable, cLApIfUpDownCause=cLApIfUpDownCause, cLApPortNumber=cLApPortNumber, cLApLinkLatencyStatsMax=cLApLinkLatencyStatsMax, cLApDot11IfAntennaEntry=cLApDot11IfAntennaEntry, cLApCredentialUserName=cLApCredentialUserName, cLApPwrInjectorStateEnabled=cLApPwrInjectorStateEnabled, cLApEthernetIfTable=cLApEthernetIfTable, cLApName=cLApName, cLAp802dot1xSupplicantOverridePassword=cLAp802dot1xSupplicantOverridePassword, ciscoLwappDot11IfAntennaGroup=ciscoLwappDot11IfAntennaGroup, cLApCountryCode=cLApCountryCode, cLApDataEncryptionStatus=cLApDataEncryptionStatus, ciscoLwappApCrashEnabled=ciscoLwappApCrashEnabled, cLApDot11IfAntennaTable=cLApDot11IfAntennaTable, cLApSeClientUserName=cLApSeClientUserName, cLApTertiaryControllerAddressType=cLApTertiaryControllerAddressType, cLApEthernetIfEntry=cLApEthernetIfEntry, cLApEthernetIfAdminStatus=cLApEthernetIfAdminStatus, ciscoLwappApWipsNotification=ciscoLwappApWipsNotification, ciscoLwappApMIBComplianceRev2=ciscoLwappApMIBComplianceRev2, cLApEthernetIfLinkSpeed=cLApEthernetIfLinkSpeed, cLApLinkLatencyTable=cLApLinkLatencyTable, cLApWipsReason=cLApWipsReason, cLApEthernetIfOutputTotalDrops=cLApEthernetIfOutputTotalDrops, cLApNsiKey=cLApNsiKey, cLApSysMacAddress=cLApSysMacAddress, cLApSeIndex=cLApSeIndex, cLApSecondaryControllerAddressType=cLApSecondaryControllerAddressType, cLApGlobalDot11IfCdpEnabled=cLApGlobalDot11IfCdpEnabled, cLApEthernetIfUnknownProtocol=cLApEthernetIfUnknownProtocol, cLApEthernetIfTxNUcastPkts=cLApEthernetIfTxNUcastPkts, cLApGlobalPrimaryControllerAddressType=cLApGlobalPrimaryControllerAddressType, cLApDot11IfEntry=cLApDot11IfEntry, cLApGlobalDot11IfTable=cLApGlobalDot11IfTable, cLApEntPhysicalIndex=cLApEntPhysicalIndex, cLApCountryTable=cLApCountryTable, cLApGlobalEthernetIfEntry=cLApGlobalEthernetIfEntry, cLAp802dot1xSupplicantTable=cLAp802dot1xSupplicantTable, cLApDot11IfSlotId=cLApDot11IfSlotId, ciscoLwappApGroupSup6=ciscoLwappApGroupSup6, ciscoLwappApNotifObjsGroup=ciscoLwappApNotifObjsGroup, cLApAMSDUEnable=cLApAMSDUEnable, ciscoLwappLinkLatency=ciscoLwappLinkLatency, cLAp802dot1xSupplicantOverrideUsername=cLAp802dot1xSupplicantOverrideUsername, ciscoLwappApGroupSup3=ciscoLwappApGroupSup3, ciscoLwappApUnsupported=ciscoLwappApUnsupported, cLApRogueApSsid=cLApRogueApSsid, cLApRogueType=cLApRogueType, ciscoLwappApMIBObjects=ciscoLwappApMIBObjects, cLApDot11IfRegDomain=cLApDot11IfRegDomain, cLApAdminStatus=cLApAdminStatus, cLApEthernetIfInputDrops=cLApEthernetIfInputDrops, cLApNameServerAddress=cLApNameServerAddress, cLLwappJoinTakenTime=cLLwappJoinTakenTime, cLApUpTime=cLApUpTime, cLApLomEnabled=cLApLomEnabled, cLApEthernetIfOutputResource=cLApEthernetIfOutputResource, cLApDataLinkLatencyStatsCurrent=cLApDataLinkLatencyStatsCurrent, cLApLinkLatencyStatsEntry=cLApLinkLatencyStatsEntry, cLApIfUpDownFailureType=cLApIfUpDownFailureType, cLApDataLinkLatencyStatsMax=cLApDataLinkLatencyStatsMax, ciscoLwappApIfUpNotify=ciscoLwappApIfUpNotify, cLApWipsEnable=cLApWipsEnable, cLApRogueDetectionEnabled=cLApRogueDetectionEnabled, cLApVlanListEntry=cLApVlanListEntry, ciscoLwappApGroupSup5=ciscoLwappApGroupSup5, cLApDot11GlobalConfigTable=cLApDot11GlobalConfigTable, cLApDot11GlobalConfigEntry=cLApDot11GlobalConfigEntry, cLApFastHbTimerTimeout=cLApFastHbTimerTimeout, cLApDot11IfType=cLApDot11IfType, cLApWipsClear=cLApWipsClear, cLApLinkLatencyReset=cLApLinkLatencyReset, cLApEthernetIfInputCrc=cLApEthernetIfInputCrc, cLApLomSecondChannel=cLApLomSecondChannel)
