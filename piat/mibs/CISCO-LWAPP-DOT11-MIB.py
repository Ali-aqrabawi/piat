#
# PySNMP MIB module CISCO-LWAPP-DOT11-MIB (http://snmplabs.com/pysmi)
# ASN.1 source http://mibs.snmplabs.com:80/asn1/CISCO-LWAPP-DOT11-MIB
# Produced by pysmi-0.3.4 at Sun Apr 21 23:48:43 2019
# On host aaqrabaw platform Linux version 4.15.0-47-generic by user aaqrabaw
# Using Python version 3.6.5 (default, Apr  1 2018, 05:46:30) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
CLDot11ChannelBandwidth, CLDot11Band = mibBuilder.importSymbols("CISCO-LWAPP-TC-MIB", "CLDot11ChannelBandwidth", "CLDot11Band")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter64, Counter32, ObjectIdentity, IpAddress, Bits, Gauge32, ModuleIdentity, iso, TimeTicks, NotificationType, MibIdentifier, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Counter32", "ObjectIdentity", "IpAddress", "Bits", "Gauge32", "ModuleIdentity", "iso", "TimeTicks", "NotificationType", "MibIdentifier", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
ciscoLwappDot11MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 612))
ciscoLwappDot11MIB.setRevisions(('2010-05-06 00:00', '2007-01-04 00:00',))
if mibBuilder.loadTexts: ciscoLwappDot11MIB.setLastUpdated('201005060000Z')
if mibBuilder.loadTexts: ciscoLwappDot11MIB.setOrganization('Cisco Systems Inc.')
ciscoLwappDot11MIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 612, 0))
ciscoLwappDot11MIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 612, 1))
ciscoLwappDot11MIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 612, 2))
cldConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1))
cldStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 2))
cldHtMacOperationsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 1), )
if mibBuilder.loadTexts: cldHtMacOperationsTable.setStatus('current')
cldHtMacOperationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-MIB", "cldHtDot11nBand"))
if mibBuilder.loadTexts: cldHtMacOperationsEntry.setStatus('current')
cldHtDot11nBand = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 1, 1, 1), CLDot11Band())
if mibBuilder.loadTexts: cldHtDot11nBand.setStatus('current')
cldHtDot11nChannelBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 1, 1, 2), CLDot11ChannelBandwidth().clone('twenty')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldHtDot11nChannelBandwidth.setStatus('current')
cldHtDot11nRifsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 1, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldHtDot11nRifsEnable.setStatus('current')
cldHtDot11nAmsduEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 1, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldHtDot11nAmsduEnable.setStatus('current')
cldHtDot11nAmpduEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldHtDot11nAmpduEnable.setStatus('current')
cldHtDot11nGuardIntervalEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 1, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldHtDot11nGuardIntervalEnable.setStatus('current')
cldHtDot11nEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 1, 1, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldHtDot11nEnable.setStatus('current')
cldMultipleCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldMultipleCountryCode.setStatus('current')
cldRegulatoryDomain = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldRegulatoryDomain.setStatus('current')
cld11nMcsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 4), )
if mibBuilder.loadTexts: cld11nMcsTable.setStatus('current')
cld11nMcsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-MIB", "cld11nMcsBand"), (0, "CISCO-LWAPP-DOT11-MIB", "cld11nMcsDataRateIndex"))
if mibBuilder.loadTexts: cld11nMcsEntry.setStatus('current')
cld11nMcsBand = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 4, 1, 1), CLDot11Band())
if mibBuilder.loadTexts: cld11nMcsBand.setStatus('current')
cld11nMcsDataRateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 4, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cld11nMcsDataRateIndex.setStatus('current')
cld11nMcsDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cld11nMcsDataRate.setStatus('current')
cld11nMcsSupportEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 4, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cld11nMcsSupportEnable.setStatus('current')
cld11nMcsChannelWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 4, 1, 5), Unsigned32()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cld11nMcsChannelWidth.setStatus('current')
cld11nMcsGuardInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 4, 1, 6), Unsigned32()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: cld11nMcsGuardInterval.setStatus('current')
cld11nMcsModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 4, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cld11nMcsModulation.setStatus('current')
cld11acMcsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 6), )
if mibBuilder.loadTexts: cld11acMcsTable.setStatus('current')
cld11acMcsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 6, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-MIB", "cld11acMcsSpatialStreamIndex"), (0, "CISCO-LWAPP-DOT11-MIB", "cld11acMcsDataRateIndex"))
if mibBuilder.loadTexts: cld11acMcsEntry.setStatus('current')
cld11acMcsSpatialStreamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cld11acMcsSpatialStreamIndex.setStatus('current')
cld11acMcsDataRateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 6, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cld11acMcsDataRateIndex.setStatus('current')
cld11acMcsSupportEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 6, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cld11acMcsSupportEnable.setStatus('current')
cld11acConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 5))
cldVhtDot11acEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 5, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldVhtDot11acEnable.setStatus('current')
cldLoadBalancing = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 8))
cldLoadBalancingEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldLoadBalancingEnable.setStatus('current')
cldLoadBalancingWindowSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldLoadBalancingWindowSize.setStatus('current')
cldLoadBalancingDenialCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldLoadBalancingDenialCount.setStatus('current')
cldLoadBalancingTrafficThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 8, 4), Unsigned32().clone(50)).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldLoadBalancingTrafficThreshold.setStatus('current')
cldBandSelect = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 9))
cldBandSelectEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldBandSelectEnable.setStatus('current')
cldBandSelectCycleCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldBandSelectCycleCount.setStatus('current')
cldBandSelectCycleThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(200)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldBandSelectCycleThreshold.setStatus('current')
cldBandSelectAgeOutSuppression = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 200)).clone(20)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldBandSelectAgeOutSuppression.setStatus('current')
cldBandSelectAgeOutDualBand = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 9, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldBandSelectAgeOutDualBand.setStatus('current')
cldBandSelectClientRssi = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-90, -20)).clone(-80)).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldBandSelectClientRssi.setStatus('current')
cldCountryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 2, 1), )
if mibBuilder.loadTexts: cldCountryTable.setStatus('current')
cldCountryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-MIB", "cldCountryCode"))
if mibBuilder.loadTexts: cldCountryEntry.setStatus('current')
cldCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 2, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: cldCountryCode.setStatus('current')
cldCountryName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 2, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldCountryName.setStatus('current')
cldCountryDot11aChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 2, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldCountryDot11aChannels.setStatus('current')
cldCountryDot11bChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 2, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldCountryDot11bChannels.setStatus('current')
cldCountryDot11aDcaChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 2, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldCountryDot11aDcaChannels.setStatus('current')
cldCountryDot11bDcaChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 2, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldCountryDot11bDcaChannels.setStatus('current')
cldCountryChangeNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldCountryChangeNotifEnable.setStatus('current')
ciscoLwappDot11CountryChangeNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 612, 0, 1)).setObjects(("CISCO-LWAPP-DOT11-MIB", "cldMultipleCountryCode"))
if mibBuilder.loadTexts: ciscoLwappDot11CountryChangeNotif.setStatus('current')
ciscoLwappDot11MIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 612, 2, 1))
ciscoLwappDot11MIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 612, 2, 2))
ciscoLwappDot11MIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 612, 2, 1, 1)).setObjects(("CISCO-LWAPP-DOT11-MIB", "ciscoLwappDot11MIBMacOperGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11MIBCompliance = ciscoLwappDot11MIBCompliance.setStatus('deprecated')
ciscoLwappDot11MIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 612, 2, 1, 2)).setObjects(("CISCO-LWAPP-DOT11-MIB", "ciscoLwappDot11MIBMacOperGroup"), ("CISCO-LWAPP-DOT11-MIB", "ciscoLwappDot11MIBConfigGroup"), ("CISCO-LWAPP-DOT11-MIB", "ciscoLwappDot11MIBNotifsGroup"), ("CISCO-LWAPP-DOT11-MIB", "ciscoLwappDot11MIBStatusGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11MIBComplianceRev1 = ciscoLwappDot11MIBComplianceRev1.setStatus('current')
ciscoLwappDot11MIBMacOperGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 612, 2, 2, 1)).setObjects(("CISCO-LWAPP-DOT11-MIB", "cldHtDot11nChannelBandwidth"), ("CISCO-LWAPP-DOT11-MIB", "cldHtDot11nRifsEnable"), ("CISCO-LWAPP-DOT11-MIB", "cldHtDot11nAmsduEnable"), ("CISCO-LWAPP-DOT11-MIB", "cldHtDot11nAmpduEnable"), ("CISCO-LWAPP-DOT11-MIB", "cldHtDot11nGuardIntervalEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11MIBMacOperGroup = ciscoLwappDot11MIBMacOperGroup.setStatus('current')
ciscoLwappDot11MIBConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 612, 2, 2, 2)).setObjects(("CISCO-LWAPP-DOT11-MIB", "cldHtDot11nEnable"), ("CISCO-LWAPP-DOT11-MIB", "cldMultipleCountryCode"), ("CISCO-LWAPP-DOT11-MIB", "cldRegulatoryDomain"), ("CISCO-LWAPP-DOT11-MIB", "cld11nMcsDataRate"), ("CISCO-LWAPP-DOT11-MIB", "cld11nMcsSupportEnable"), ("CISCO-LWAPP-DOT11-MIB", "cldCountryChangeNotifEnable"), ("CISCO-LWAPP-DOT11-MIB", "cldLoadBalancingEnable"), ("CISCO-LWAPP-DOT11-MIB", "cldLoadBalancingWindowSize"), ("CISCO-LWAPP-DOT11-MIB", "cldLoadBalancingDenialCount"), ("CISCO-LWAPP-DOT11-MIB", "cldBandSelectEnable"), ("CISCO-LWAPP-DOT11-MIB", "cldBandSelectCycleCount"), ("CISCO-LWAPP-DOT11-MIB", "cldBandSelectCycleThreshold"), ("CISCO-LWAPP-DOT11-MIB", "cldBandSelectAgeOutSuppression"), ("CISCO-LWAPP-DOT11-MIB", "cldBandSelectAgeOutDualBand"), ("CISCO-LWAPP-DOT11-MIB", "cldBandSelectClientRssi"), ("CISCO-LWAPP-DOT11-MIB", "cld11nMcsChannelWidth"), ("CISCO-LWAPP-DOT11-MIB", "cld11nMcsGuardInterval"), ("CISCO-LWAPP-DOT11-MIB", "cld11nMcsModulation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11MIBConfigGroup = ciscoLwappDot11MIBConfigGroup.setStatus('current')
ciscoLwappDot11MIBNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 612, 2, 2, 3)).setObjects(("CISCO-LWAPP-DOT11-MIB", "ciscoLwappDot11CountryChangeNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11MIBNotifsGroup = ciscoLwappDot11MIBNotifsGroup.setStatus('current')
ciscoLwappDot11MIBStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 612, 2, 2, 4)).setObjects(("CISCO-LWAPP-DOT11-MIB", "cldCountryName"), ("CISCO-LWAPP-DOT11-MIB", "cldCountryDot11aChannels"), ("CISCO-LWAPP-DOT11-MIB", "cldCountryDot11bChannels"), ("CISCO-LWAPP-DOT11-MIB", "cldCountryDot11aDcaChannels"), ("CISCO-LWAPP-DOT11-MIB", "cldCountryDot11bDcaChannels"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11MIBStatusGroup = ciscoLwappDot11MIBStatusGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-LWAPP-DOT11-MIB", cld11nMcsDataRateIndex=cld11nMcsDataRateIndex, cld11acMcsDataRateIndex=cld11acMcsDataRateIndex, cld11nMcsEntry=cld11nMcsEntry, ciscoLwappDot11MIBObjects=ciscoLwappDot11MIBObjects, cldHtDot11nBand=cldHtDot11nBand, cld11acConfig=cld11acConfig, cldCountryChangeNotifEnable=cldCountryChangeNotifEnable, cldLoadBalancingEnable=cldLoadBalancingEnable, ciscoLwappDot11MIBComplianceRev1=ciscoLwappDot11MIBComplianceRev1, cldBandSelect=cldBandSelect, PYSNMP_MODULE_ID=ciscoLwappDot11MIB, cldHtDot11nAmsduEnable=cldHtDot11nAmsduEnable, cldCountryCode=cldCountryCode, ciscoLwappDot11MIBGroups=ciscoLwappDot11MIBGroups, cldHtDot11nEnable=cldHtDot11nEnable, ciscoLwappDot11MIBMacOperGroup=ciscoLwappDot11MIBMacOperGroup, cldHtDot11nAmpduEnable=cldHtDot11nAmpduEnable, cld11nMcsTable=cld11nMcsTable, cldBandSelectCycleThreshold=cldBandSelectCycleThreshold, cldStatus=cldStatus, cld11nMcsSupportEnable=cld11nMcsSupportEnable, cld11nMcsModulation=cld11nMcsModulation, cldHtMacOperationsTable=cldHtMacOperationsTable, ciscoLwappDot11MIB=ciscoLwappDot11MIB, cldBandSelectEnable=cldBandSelectEnable, cldBandSelectAgeOutDualBand=cldBandSelectAgeOutDualBand, ciscoLwappDot11CountryChangeNotif=ciscoLwappDot11CountryChangeNotif, cldHtDot11nGuardIntervalEnable=cldHtDot11nGuardIntervalEnable, ciscoLwappDot11MIBNotifs=ciscoLwappDot11MIBNotifs, cldCountryDot11bChannels=cldCountryDot11bChannels, cldCountryDot11aDcaChannels=cldCountryDot11aDcaChannels, cldLoadBalancingWindowSize=cldLoadBalancingWindowSize, cldCountryDot11aChannels=cldCountryDot11aChannels, cldMultipleCountryCode=cldMultipleCountryCode, ciscoLwappDot11MIBCompliance=ciscoLwappDot11MIBCompliance, cldBandSelectAgeOutSuppression=cldBandSelectAgeOutSuppression, cldHtDot11nChannelBandwidth=cldHtDot11nChannelBandwidth, cld11nMcsChannelWidth=cld11nMcsChannelWidth, cldBandSelectCycleCount=cldBandSelectCycleCount, cld11acMcsTable=cld11acMcsTable, cldCountryDot11bDcaChannels=cldCountryDot11bDcaChannels, cldCountryTable=cldCountryTable, ciscoLwappDot11MIBNotifsGroup=ciscoLwappDot11MIBNotifsGroup, cld11acMcsSupportEnable=cld11acMcsSupportEnable, cld11nMcsDataRate=cld11nMcsDataRate, cld11acMcsEntry=cld11acMcsEntry, cldVhtDot11acEnable=cldVhtDot11acEnable, cldLoadBalancing=cldLoadBalancing, cldLoadBalancingDenialCount=cldLoadBalancingDenialCount, ciscoLwappDot11MIBConform=ciscoLwappDot11MIBConform, cld11nMcsBand=cld11nMcsBand, cldConfig=cldConfig, ciscoLwappDot11MIBConfigGroup=ciscoLwappDot11MIBConfigGroup, cldRegulatoryDomain=cldRegulatoryDomain, cld11acMcsSpatialStreamIndex=cld11acMcsSpatialStreamIndex, cldBandSelectClientRssi=cldBandSelectClientRssi, cldCountryName=cldCountryName, ciscoLwappDot11MIBStatusGroup=ciscoLwappDot11MIBStatusGroup, cld11nMcsGuardInterval=cld11nMcsGuardInterval, cldCountryEntry=cldCountryEntry, cldHtDot11nRifsEnable=cldHtDot11nRifsEnable, cldLoadBalancingTrafficThreshold=cldLoadBalancingTrafficThreshold, ciscoLwappDot11MIBCompliances=ciscoLwappDot11MIBCompliances, cldHtMacOperationsEntry=cldHtMacOperationsEntry)
